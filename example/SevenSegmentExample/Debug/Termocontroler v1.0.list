
Termocontroler v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003348  08003348  00004348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033bc  080033bc  000043bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033c4  080033c4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c4  080033c4  000043c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033c8  080033c8  000043c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080033cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08003428  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08003428  000052e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca18  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb1  00000000  00000000  00011aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00013958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000849  00000000  00000000  00014428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a36  00000000  00000000  00014c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd68  00000000  00000000  0002e6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb86  00000000  00000000  0003a40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9f95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  000c9fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000cd3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003330 	.word	0x08003330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003330 	.word	0x08003330

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08e      	sub	sp, #56	@ 0x38
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fe1d 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f88b 	bl	80006d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f9ad 	bl	8000918 <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80005be:	f000 f957 	bl	8000870 <_ZL13MX_TIM10_Initv>
  MX_TIM11_Init();
 80005c2:	f000 f97f 	bl	80008c4 <_ZL13MX_TIM11_Initv>
  MX_TIM2_Init();
 80005c6:	f000 f8f7 	bl	80007b8 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  //Start the Timer TIM3 in Interrupt mode
	if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80005ca:	4839      	ldr	r0, [pc, #228]	@ (80006b0 <main+0x104>)
 80005cc:	f001 fda6 	bl	800211c <HAL_TIM_Base_Start_IT>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf14      	ite	ne
 80005d6:	2301      	movne	r3, #1
 80005d8:	2300      	moveq	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <main+0x38>
	{
	  /* Starting Error */
	  Error_Handler();
 80005e0:	f000 fa4e 	bl	8000a80 <Error_Handler>
	}

	//Seven segment initialize
	SevenSegment display;
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fb9c 	bl	8000d26 <_ZN12SevenSegmentC1Ev>

	static segmentsPin segPin[8];
	segPin[0].port = segmentA_GPIO_Port;
 80005ee:	4b31      	ldr	r3, [pc, #196]	@ (80006b4 <main+0x108>)
 80005f0:	4a31      	ldr	r2, [pc, #196]	@ (80006b8 <main+0x10c>)
 80005f2:	601a      	str	r2, [r3, #0]
	segPin[0].pin = segmentA_Pin;
 80005f4:	4b2f      	ldr	r3, [pc, #188]	@ (80006b4 <main+0x108>)
 80005f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005fa:	809a      	strh	r2, [r3, #4]
	segPin[1].port = segmentB_GPIO_Port;
 80005fc:	4b2d      	ldr	r3, [pc, #180]	@ (80006b4 <main+0x108>)
 80005fe:	4a2e      	ldr	r2, [pc, #184]	@ (80006b8 <main+0x10c>)
 8000600:	609a      	str	r2, [r3, #8]
	segPin[1].pin = segmentB_Pin;
 8000602:	4b2c      	ldr	r3, [pc, #176]	@ (80006b4 <main+0x108>)
 8000604:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000608:	819a      	strh	r2, [r3, #12]
	segPin[2].port = segmentC_GPIO_Port;
 800060a:	4b2a      	ldr	r3, [pc, #168]	@ (80006b4 <main+0x108>)
 800060c:	4a2b      	ldr	r2, [pc, #172]	@ (80006bc <main+0x110>)
 800060e:	611a      	str	r2, [r3, #16]
	segPin[2].pin = segmentC_Pin;
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <main+0x108>)
 8000612:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000616:	829a      	strh	r2, [r3, #20]
	segPin[3].port = segmentD_GPIO_Port;
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <main+0x108>)
 800061a:	4a28      	ldr	r2, [pc, #160]	@ (80006bc <main+0x110>)
 800061c:	619a      	str	r2, [r3, #24]
	segPin[3].pin = segmentD_Pin;
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <main+0x108>)
 8000620:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000624:	839a      	strh	r2, [r3, #28]
	segPin[4].port = segmentE_GPIO_Port;
 8000626:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <main+0x108>)
 8000628:	4a25      	ldr	r2, [pc, #148]	@ (80006c0 <main+0x114>)
 800062a:	621a      	str	r2, [r3, #32]
	segPin[4].pin = segmentE_Pin;
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <main+0x108>)
 800062e:	2240      	movs	r2, #64	@ 0x40
 8000630:	849a      	strh	r2, [r3, #36]	@ 0x24
	segPin[5].port = segmentF_GPIO_Port;
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <main+0x108>)
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <main+0x10c>)
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
	segPin[5].pin = segmentF_Pin;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <main+0x108>)
 800063a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800063e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	segPin[6].port = segmentG_GPIO_Port;
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <main+0x108>)
 8000642:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <main+0x114>)
 8000644:	631a      	str	r2, [r3, #48]	@ 0x30
	segPin[6].pin = segmentG_Pin;
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <main+0x108>)
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	869a      	strh	r2, [r3, #52]	@ 0x34
	segPin[7].port = segmentP_GPIO_Port;
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <main+0x108>)
 800064e:	4a1a      	ldr	r2, [pc, #104]	@ (80006b8 <main+0x10c>)
 8000650:	639a      	str	r2, [r3, #56]	@ 0x38
	segPin[7].pin = segmentP_Pin;
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0x108>)
 8000654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000658:	879a      	strh	r2, [r3, #60]	@ 0x3c


	segmentDigit segDig[3];
	segDig[0].port = digOnes_GPIO_Port;
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <main+0x110>)
 800065c:	607b      	str	r3, [r7, #4]
	segDig[0].pin = digOnes_Pin;
 800065e:	2340      	movs	r3, #64	@ 0x40
 8000660:	813b      	strh	r3, [r7, #8]
	segDig[1].port = digTens_GPIO_Port;
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <main+0x118>)
 8000664:	60fb      	str	r3, [r7, #12]
	segDig[1].pin = digTens_Pin;
 8000666:	2304      	movs	r3, #4
 8000668:	823b      	strh	r3, [r7, #16]
	segDig[2].port = digHundreds_GPIO_Port;
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <main+0x114>)
 800066c:	617b      	str	r3, [r7, #20]
	segDig[2].pin = digHundreds_Pin;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	833b      	strh	r3, [r7, #24]

	display.intilization(segPin, segDig, 3, true);
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	f107 001c 	add.w	r0, r7, #28
 800067a:	2301      	movs	r3, #1
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2303      	movs	r3, #3
 8000680:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <main+0x108>)
 8000682:	f000 fb5b 	bl	8000d3c <_ZN12SevenSegment12intilizationERA8_K11segmentsPinPK12segmentDigithb>

 	//display.setNumber(-3);
 	//display.setNumberF(1.5);
 	//display.message("FFF");
 	display << "tEh";
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	490f      	ldr	r1, [pc, #60]	@ (80006c8 <main+0x11c>)
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fd17 	bl	80010c0 <_ZN12SevenSegmentlsEPKc>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (displayRefresh)
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <main+0x120>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0fa      	beq.n	8000692 <main+0xe6>
	  {
		  display.refreshDisplay();
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fc3d 	bl	8000f20 <_ZN12SevenSegment14refreshDisplayEv>
		  displayRefresh = false;
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <main+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	  if (displayRefresh)
 80006ac:	e7f1      	b.n	8000692 <main+0xe6>
 80006ae:	bf00      	nop
 80006b0:	20000078 	.word	0x20000078
 80006b4:	20000154 	.word	0x20000154
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	08003348 	.word	0x08003348
 80006cc:	20000150 	.word	0x20000150

080006d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	@ 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fa12 	bl	8002b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <_Z18SystemClock_Configv+0xe0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a2c      	ldr	r2, [pc, #176]	@ (80007b0 <_Z18SystemClock_Configv+0xe0>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <_Z18SystemClock_Configv+0xe0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <_Z18SystemClock_Configv+0xe4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800071c:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <_Z18SystemClock_Configv+0xe4>)
 800071e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <_Z18SystemClock_Configv+0xe4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000748:	2350      	movs	r3, #80	@ 0x50
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000750:	2304      	movs	r3, #4
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f86b 	bl	8001834 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800076e:	f000 f987 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fac8 	bl	8001d24 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf14      	ite	ne
 800079a:	2301      	movne	r3, #1
 800079c:	2300      	moveq	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 80007a4:	f000 f96c 	bl	8000a80 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	@ 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80007dc:	4b23      	ldr	r3, [pc, #140]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007de:	2207      	movs	r2, #7
 80007e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33333 - 1;
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007ea:	f248 2234 	movw	r2, #33332	@ 0x8234
 80007ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007fc:	481b      	ldr	r0, [pc, #108]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 80007fe:	f001 fc3d 	bl	800207c <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	bf14      	ite	ne
 8000808:	2301      	movne	r3, #1
 800080a:	2300      	moveq	r3, #0
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000812:	f000 f935 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4619      	mov	r1, r3
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 8000824:	f001 fdcc 	bl	80023c0 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000838:	f000 f922 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <_ZL12MX_TIM2_Initv+0xb4>)
 800084a:	f001 ffd3 	bl	80027f4 <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	bf14      	ite	ne
 8000854:	2301      	movne	r3, #1
 8000856:	2300      	moveq	r3, #0
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 800085e:	f000 f90f 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000078 	.word	0x20000078

08000870 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <_ZL13MX_TIM10_Initv+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000 - 1;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 800087c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000880:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65485 - 1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 800088a:	f64f 72cc 	movw	r2, #65484	@ 0xffcc
 800088e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <_ZL13MX_TIM10_Initv+0x4c>)
 800089e:	f001 fbed 	bl	800207c <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bf14      	ite	ne
 80008a8:	2301      	movne	r3, #1
 80008aa:	2300      	moveq	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <_ZL13MX_TIM10_Initv+0x46>
  {
    Error_Handler();
 80008b2:	f000 f8e5 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	200000c0 	.word	0x200000c0
 80008c0:	40014400 	.word	0x40014400

080008c4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <_ZL13MX_TIM11_Initv+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8000 - 1;
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008d0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80008d4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000 - 1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008e2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80008f0:	4807      	ldr	r0, [pc, #28]	@ (8000910 <_ZL13MX_TIM11_Initv+0x4c>)
 80008f2:	f001 fbc3 	bl	800207c <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf14      	ite	ne
 80008fc:	2301      	movne	r3, #1
 80008fe:	2300      	moveq	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <_ZL13MX_TIM11_Initv+0x46>
  {
    Error_Handler();
 8000906:	f000 f8bb 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000108 	.word	0x20000108
 8000914:	40014800 	.word	0x40014800

08000918 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a4d      	ldr	r2, [pc, #308]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b47      	ldr	r3, [pc, #284]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a46      	ldr	r2, [pc, #280]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b44      	ldr	r3, [pc, #272]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b40      	ldr	r3, [pc, #256]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b39      	ldr	r3, [pc, #228]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a38      	ldr	r2, [pc, #224]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b36      	ldr	r3, [pc, #216]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x154>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, segmentC_Pin|segmentD_Pin|digOnes_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f24c 0140 	movw	r1, #49216	@ 0xc040
 80009a4:	4832      	ldr	r0, [pc, #200]	@ (8000a70 <_ZL12MX_GPIO_Initv+0x158>)
 80009a6:	f000 ff2b 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, segmentE_Pin|segmentG_Pin|digHundreds_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80009b0:	4830      	ldr	r0, [pc, #192]	@ (8000a74 <_ZL12MX_GPIO_Initv+0x15c>)
 80009b2:	f000 ff25 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segmentF_Pin|segmentP_Pin|segmentA_Pin|segmentB_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80009bc:	482e      	ldr	r0, [pc, #184]	@ (8000a78 <_ZL12MX_GPIO_Initv+0x160>)
 80009be:	f000 ff1f 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(digTens_GPIO_Port, digTens_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2104      	movs	r1, #4
 80009c6:	482d      	ldr	r0, [pc, #180]	@ (8000a7c <_ZL12MX_GPIO_Initv+0x164>)
 80009c8:	f000 ff1a 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009cc:	2360      	movs	r3, #96	@ 0x60
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009dc:	2305      	movs	r3, #5
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4824      	ldr	r0, [pc, #144]	@ (8000a78 <_ZL12MX_GPIO_Initv+0x160>)
 80009e8:	f000 fd86 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentC_Pin segmentD_Pin digOnes_Pin */
  GPIO_InitStruct.Pin = segmentC_Pin|segmentD_Pin|digOnes_Pin;
 80009ec:	f24c 0340 	movw	r3, #49216	@ 0xc040
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <_ZL12MX_GPIO_Initv+0x158>)
 8000a06:	f000 fd77 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentE_Pin segmentG_Pin digHundreds_Pin */
  GPIO_InitStruct.Pin = segmentE_Pin|segmentG_Pin|digHundreds_Pin;
 8000a0a:	f44f 5386 	mov.w	r3, #4288	@ 0x10c0
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_ZL12MX_GPIO_Initv+0x15c>)
 8000a24:	f000 fd68 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentF_Pin segmentP_Pin segmentA_Pin segmentB_Pin */
  GPIO_InitStruct.Pin = segmentF_Pin|segmentP_Pin|segmentA_Pin|segmentB_Pin;
 8000a28:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <_ZL12MX_GPIO_Initv+0x160>)
 8000a42:	f000 fd59 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : digTens_Pin */
  GPIO_InitStruct.Pin = digTens_Pin;
 8000a46:	2304      	movs	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(digTens_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4807      	ldr	r0, [pc, #28]	@ (8000a7c <_ZL12MX_GPIO_Initv+0x164>)
 8000a5e:	f000 fd4b 	bl	80014f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <Error_Handler+0x8>

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aec:	d116      	bne.n	8000b1c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b1d      	ldr	r3, [pc, #116]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201c      	movs	r0, #28
 8000b10:	f000 fcbb 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b14:	201c      	movs	r0, #28
 8000b16:	f000 fcd4 	bl	80014c2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000b1a:	e026      	b.n	8000b6a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a15      	ldr	r2, [pc, #84]	@ (8000b78 <HAL_TIM_Base_MspInit+0x9c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d10e      	bne.n	8000b44 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	4a11      	ldr	r2, [pc, #68]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
}
 8000b42:	e012      	b.n	8000b6a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM11)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0c      	ldr	r2, [pc, #48]	@ (8000b7c <HAL_TIM_Base_MspInit+0xa0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d10d      	bne.n	8000b6a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_TIM_Base_MspInit+0x98>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40014400 	.word	0x40014400
 8000b7c:	40014800 	.word	0x40014800

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <NMI_Handler+0x4>

08000b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <MemManage_Handler+0x4>

08000b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd6:	f000 fb5d 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <TIM2_IRQHandler+0x14>)
 8000be6:	f001 fafb 	bl	80021e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  displayRefresh = true;
 8000bea:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <TIM2_IRQHandler+0x18>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000078 	.word	0x20000078
 8000bf8:	20000150 	.word	0x20000150

08000bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_kill>:

int _kill(int pid, int sig)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c16:	f001 ffd3 	bl	8002bc0 <__errno>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2216      	movs	r2, #22
 8000c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_exit>:

void _exit (int status)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffe7 	bl	8000c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c3e:	bf00      	nop
 8000c40:	e7fd      	b.n	8000c3e <_exit+0x12>
	...

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f001 ffa4 	bl	8002bc0 <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20018000 	.word	0x20018000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	20000194 	.word	0x20000194
 8000cac:	200002e8 	.word	0x200002e8

08000cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <SystemInit+0x20>)
 8000cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <SystemInit+0x20>)
 8000cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd8:	f7ff ffea 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d02:	f001 ff63 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fc51 	bl	80005ac <main>
  bx  lr    
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d18:	080033cc 	.word	0x080033cc
  ldr r2, =_sbss
 8000d1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d20:	200002e8 	.word	0x200002e8

08000d24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC_IRQHandler>

08000d26 <_ZN12SevenSegmentC1Ev>:
 *      Author: eng. Hristian Rusev
 */

#include "SevenSegment.h"

SevenSegment::SevenSegment()
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
{

}
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZN12SevenSegment12intilizationERA8_K11segmentsPinPK12segmentDigithb>:
	buffer = new char[(2*numberDigits)+1];

}

void SevenSegment::intilization(const segmentsPin (&pins)[8], const segmentDigit *digits, uint8_t segmentDigits_, bool commonCathode_)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	70fb      	strb	r3, [r7, #3]
	segmentPin = pins;					//struct with seven segments pins
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	68ba      	ldr	r2, [r7, #8]
 8000d4e:	601a      	str	r2, [r3, #0]
	digitsPin = digits; 					//struct with digits pins
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
	numberDigits = segmentDigits_; 			//number of digits
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	721a      	strb	r2, [r3, #8]
	commonCathode = commonCathode_;			//type of seven segment common cathode or common anode
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	7e3a      	ldrb	r2, [r7, #24]
 8000d60:	725a      	strb	r2, [r3, #9]

	position = 0;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2200      	movs	r2, #0
 8000d66:	729a      	strb	r2, [r3, #10]
	bufferIndex = 0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	72da      	strb	r2, [r3, #11]
	symbolCodes = new char[numberDigits];
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	7a1b      	ldrb	r3, [r3, #8]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fdc2 	bl	80028fc <_Znaj>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
	buffer = new char[(2*numberDigits)+1];
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	7a1b      	ldrb	r3, [r3, #8]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	3301      	adds	r3, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f001 fdb7 	bl	80028fc <_Znaj>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	60da      	str	r2, [r3, #12]
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <_ZN12SevenSegment7messageEPKc>:
bool SevenSegment::message(const char *str)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	uint8_t strIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]
	uint8_t symbolIdx = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
	while(this->buffer[strIdx] != '\n')
 8000db2:	e0a3      	b.n	8000efc <_ZN12SevenSegment7messageEPKc+0x15c>
	{
		if(str[strIdx] >= '0' && str[strIdx] <= '9')
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dbe:	d913      	bls.n	8000de8 <_ZN12SevenSegment7messageEPKc+0x48>
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b39      	cmp	r3, #57	@ 0x39
 8000dca:	d80d      	bhi.n	8000de8 <_ZN12SevenSegment7messageEPKc+0x48>
			this->symbolCodes[symbolIdx] = digitCodeMap[str[strIdx] - '0'];
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6919      	ldr	r1, [r3, #16]
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	440b      	add	r3, r1
 8000de0:	494e      	ldr	r1, [pc, #312]	@ (8000f1c <_ZN12SevenSegment7messageEPKc+0x17c>)
 8000de2:	5c8a      	ldrb	r2, [r1, r2]
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e083      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
		else if(str[strIdx] >= 'A' && str[strIdx] <= 'Z')
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b40      	cmp	r3, #64	@ 0x40
 8000df2:	d913      	bls.n	8000e1c <_ZN12SevenSegment7messageEPKc+0x7c>
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b5a      	cmp	r3, #90	@ 0x5a
 8000dfe:	d80d      	bhi.n	8000e1c <_ZN12SevenSegment7messageEPKc+0x7c>
			this->symbolCodes[symbolIdx] = digitCodeMap[str[strIdx] - 'A' + 10];
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	4413      	add	r3, r2
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	f1a3 0237 	sub.w	r2, r3, #55	@ 0x37
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6919      	ldr	r1, [r3, #16]
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	440b      	add	r3, r1
 8000e14:	4941      	ldr	r1, [pc, #260]	@ (8000f1c <_ZN12SevenSegment7messageEPKc+0x17c>)
 8000e16:	5c8a      	ldrb	r2, [r1, r2]
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e069      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
		else if(str[strIdx] >= 'a' && str[strIdx] <= 'z')
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b60      	cmp	r3, #96	@ 0x60
 8000e26:	d913      	bls.n	8000e50 <_ZN12SevenSegment7messageEPKc+0xb0>
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e32:	d80d      	bhi.n	8000e50 <_ZN12SevenSegment7messageEPKc+0xb0>
			this->symbolCodes[symbolIdx] = digitCodeMap[str[strIdx] - 'a' + 10];
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f1a3 0257 	sub.w	r2, r3, #87	@ 0x57
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6919      	ldr	r1, [r3, #16]
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	440b      	add	r3, r1
 8000e48:	4934      	ldr	r1, [pc, #208]	@ (8000f1c <_ZN12SevenSegment7messageEPKc+0x17c>)
 8000e4a:	5c8a      	ldrb	r2, [r1, r2]
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e04f      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
		else if (str[strIdx] == ' ')
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	4413      	add	r3, r2
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b20      	cmp	r3, #32
 8000e5a:	d106      	bne.n	8000e6a <_ZN12SevenSegment7messageEPKc+0xca>
			this->symbolCodes[symbolIdx] = digitCodeMap[BLANK_IDX];
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	4413      	add	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e042      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
		else if (str[strIdx] == '.')
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e74:	d11c      	bne.n	8000eb0 <_ZN12SevenSegment7messageEPKc+0x110>
			if(strIdx == 0)
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <_ZN12SevenSegment7messageEPKc+0xea>
				this->symbolCodes[symbolIdx] = digitCodeMap[DOT_IDX];
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	4413      	add	r3, r2
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e032      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
			else
			{
				this->symbolCodes[symbolIdx - 1] = digitCodeMap[DOT_IDX] | this->symbolCodes[symbolIdx - 1];
 8000e8a:	2080      	movs	r0, #128	@ 0x80
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6919      	ldr	r1, [r3, #16]
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	440b      	add	r3, r1
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	701a      	strb	r2, [r3, #0]
				--symbolIdx;
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	73bb      	strb	r3, [r7, #14]
 8000eae:	e01f      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
			}

		else if (str[strIdx] == '*')
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eba:	d106      	bne.n	8000eca <_ZN12SevenSegment7messageEPKc+0x12a>
			this->symbolCodes[symbolIdx] = digitCodeMap[ASTERISK_IDX];
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	2263      	movs	r2, #99	@ 0x63
 8000ec6:	701a      	strb	r2, [r3, #0]
 8000ec8:	e012      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
		else if (str[strIdx] == '_')
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ed4:	d106      	bne.n	8000ee4 <_ZN12SevenSegment7messageEPKc+0x144>
			this->symbolCodes[symbolIdx] = digitCodeMap[UNDERSCORE_IDX];
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	4413      	add	r3, r2
 8000ede:	2208      	movs	r2, #8
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e005      	b.n	8000ef0 <_ZN12SevenSegment7messageEPKc+0x150>
		else  // Every unknown character is shown as a dash
			this->symbolCodes[symbolIdx] = digitCodeMap[DASH_IDX];
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	4413      	add	r3, r2
 8000eec:	2240      	movs	r2, #64	@ 0x40
 8000eee:	701a      	strb	r2, [r3, #0]


		++strIdx; ++symbolIdx;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	7bbb      	ldrb	r3, [r7, #14]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	73bb      	strb	r3, [r7, #14]
	while(this->buffer[strIdx] != '\n')
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	4413      	add	r3, r2
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	f47f af54 	bne.w	8000db4 <_ZN12SevenSegment7messageEPKc+0x14>

	}

	return true;
 8000f0c:	2301      	movs	r3, #1
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	08003360 	.word	0x08003360

08000f20 <_ZN12SevenSegment14refreshDisplayEv>:
		this->symbolCodes[idx] = digitCodeMap[DASH_IDX];
}


void SevenSegment::refreshDisplay(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

	this->segmentOFF();
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 f894 	bl	8001056 <_ZN12SevenSegment10segmentOFFEv>
	this->position++;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7a9b      	ldrb	r3, [r3, #10]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	729a      	strb	r2, [r3, #10]
	if(this->position == this->numberDigits)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7a9a      	ldrb	r2, [r3, #10]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a1b      	ldrb	r3, [r3, #8]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d102      	bne.n	8000f4c <_ZN12SevenSegment14refreshDisplayEv+0x2c>
		this->position = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	729a      	strb	r2, [r3, #10]

	//Set segment outputs
	this->loadSymbol();
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f807 	bl	8000f60 <_ZN12SevenSegment10loadSymbolEv>
	this->segmentON();
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f84a 	bl	8000fec <_ZN12SevenSegment9segmentONEv>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN12SevenSegment10loadSymbolEv>:

void SevenSegment::loadSymbol(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	char symbol = *(this->symbolCodes + this->position);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	7a92      	ldrb	r2, [r2, #10]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < 8; ++i)
 8000f76:	2300      	movs	r3, #0
 8000f78:	73bb      	strb	r3, [r7, #14]
 8000f7a:	e02f      	b.n	8000fdc <_ZN12SevenSegment10loadSymbolEv+0x7c>
	{
		if((symbol & 0b00000001) == 0b00000001)
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d012      	beq.n	8000fac <_ZN12SevenSegment10loadSymbolEv+0x4c>
				HAL_GPIO_WritePin(this->segmentPin[i].port, this->segmentPin[i].pin, GPIO_PIN_SET);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f000 fc2b 	bl	8001800 <HAL_GPIO_WritePin>
 8000faa:	e011      	b.n	8000fd0 <_ZN12SevenSegment10loadSymbolEv+0x70>
			else
				HAL_GPIO_WritePin(this->segmentPin[i].port, this->segmentPin[i].pin, GPIO_PIN_RESET);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f000 fc18 	bl	8001800 <HAL_GPIO_WritePin>
		symbol >>= 1;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	085b      	lsrs	r3, r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 8; ++i)
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73bb      	strb	r3, [r7, #14]
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	d9cc      	bls.n	8000f7c <_ZN12SevenSegment10loadSymbolEv+0x1c>
	}

}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN12SevenSegment9segmentONEv>:

void SevenSegment::segmentON(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	uint8_t idx = this->numberDigits - 1 - this->position;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a1a      	ldrb	r2, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7a9b      	ldrb	r3, [r3, #10]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3b01      	subs	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
	if(this->commonCathode)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7a5b      	ldrb	r3, [r3, #9]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d010      	beq.n	800102e <_ZN12SevenSegment9segmentONEv+0x42>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_SET);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4413      	add	r3, r2
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	889b      	ldrh	r3, [r3, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	f000 fbea 	bl	8001800 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_RESET);
}
 800102c:	e00f      	b.n	800104e <_ZN12SevenSegment9segmentONEv+0x62>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_RESET);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4413      	add	r3, r2
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	4413      	add	r3, r2
 8001044:	889b      	ldrh	r3, [r3, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	f000 fbd9 	bl	8001800 <HAL_GPIO_WritePin>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZN12SevenSegment10segmentOFFEv>:

void SevenSegment::segmentOFF(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	uint8_t idx = this->numberDigits - 1 - this->position;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7a1a      	ldrb	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a9b      	ldrb	r3, [r3, #10]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	3b01      	subs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
	if(this->commonCathode)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7a5b      	ldrb	r3, [r3, #9]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d010      	beq.n	8001098 <_ZN12SevenSegment10segmentOFFEv+0x42>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_RESET);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	889b      	ldrh	r3, [r3, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	f000 fbb5 	bl	8001800 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_SET);
}
 8001096:	e00f      	b.n	80010b8 <_ZN12SevenSegment10segmentOFFEv+0x62>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_SET);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f000 fba4 	bl	8001800 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_ZN12SevenSegmentlsEPKc>:

void SevenSegment::operator<<(const char *str)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	char *member = new char[(2 * this->numberDigits) + 1];
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7a1b      	ldrb	r3, [r3, #8]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3301      	adds	r3, #1
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fc12 	bl	80028fc <_Znaj>
 80010d8:	4603      	mov	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]
	uint8_t size = sprintf(member, "%s", str);
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4943      	ldr	r1, [pc, #268]	@ (80011ec <_ZN12SevenSegmentlsEPKc+0x12c>)
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f001 fcef 	bl	8002ac4 <siprintf>
 80010e6:	4603      	mov	r3, r0
 80010e8:	72fb      	strb	r3, [r7, #11]

	//Get number of points
	uint8_t pointNumber = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
	uint8_t symbolNumber = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75bb      	strb	r3, [r7, #22]
	uint8_t idx = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	757b      	strb	r3, [r7, #21]
	for(uint8_t i = 0; i < size; ++i)
 80010f6:	2300      	movs	r3, #0
 80010f8:	753b      	strb	r3, [r7, #20]
 80010fa:	e00f      	b.n	800111c <_ZN12SevenSegmentlsEPKc+0x5c>
	{
		if(member[i] == '.')
 80010fc:	7d3b      	ldrb	r3, [r7, #20]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b2e      	cmp	r3, #46	@ 0x2e
 8001106:	d103      	bne.n	8001110 <_ZN12SevenSegmentlsEPKc+0x50>
			++pointNumber;
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	3301      	adds	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	e002      	b.n	8001116 <_ZN12SevenSegmentlsEPKc+0x56>
		else
			++symbolNumber;
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	3301      	adds	r3, #1
 8001114:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i = 0; i < size; ++i)
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	753b      	strb	r3, [r7, #20]
 800111c:	7d3a      	ldrb	r2, [r7, #20]
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3eb      	bcc.n	80010fc <_ZN12SevenSegmentlsEPKc+0x3c>
	}
	//Size check
	if(symbolNumber > this->numberDigits)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7a1b      	ldrb	r3, [r3, #8]
 8001128:	7dba      	ldrb	r2, [r7, #22]
 800112a:	429a      	cmp	r2, r3
 800112c:	d911      	bls.n	8001152 <_ZN12SevenSegmentlsEPKc+0x92>
	{
		for(uint8_t i = 0; i < this->numberDigits; ++i)
 800112e:	2300      	movs	r3, #0
 8001130:	74fb      	strb	r3, [r7, #19]
 8001132:	e008      	b.n	8001146 <_ZN12SevenSegmentlsEPKc+0x86>
			this->buffer[i] = '-';
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	7cfb      	ldrb	r3, [r7, #19]
 800113a:	4413      	add	r3, r2
 800113c:	222d      	movs	r2, #45	@ 0x2d
 800113e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < this->numberDigits; ++i)
 8001140:	7cfb      	ldrb	r3, [r7, #19]
 8001142:	3301      	adds	r3, #1
 8001144:	74fb      	strb	r3, [r7, #19]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7a1b      	ldrb	r3, [r3, #8]
 800114a:	7cfa      	ldrb	r2, [r7, #19]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3f1      	bcc.n	8001134 <_ZN12SevenSegmentlsEPKc+0x74>
 8001150:	e036      	b.n	80011c0 <_ZN12SevenSegmentlsEPKc+0x100>
	}
	else if(symbolNumber < this->numberDigits)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7a1b      	ldrb	r3, [r3, #8]
 8001156:	7dba      	ldrb	r2, [r7, #22]
 8001158:	429a      	cmp	r2, r3
 800115a:	d228      	bcs.n	80011ae <_ZN12SevenSegmentlsEPKc+0xee>
	{
		for(; idx < numberDigits - symbolNumber; ++idx)
 800115c:	e008      	b.n	8001170 <_ZN12SevenSegmentlsEPKc+0xb0>
			this->buffer[idx] = ' ';
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	7d7b      	ldrb	r3, [r7, #21]
 8001164:	4413      	add	r3, r2
 8001166:	2220      	movs	r2, #32
 8001168:	701a      	strb	r2, [r3, #0]
		for(; idx < numberDigits - symbolNumber; ++idx)
 800116a:	7d7b      	ldrb	r3, [r7, #21]
 800116c:	3301      	adds	r3, #1
 800116e:	757b      	strb	r3, [r7, #21]
 8001170:	7d7a      	ldrb	r2, [r7, #21]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7a1b      	ldrb	r3, [r3, #8]
 8001176:	4619      	mov	r1, r3
 8001178:	7dbb      	ldrb	r3, [r7, #22]
 800117a:	1acb      	subs	r3, r1, r3
 800117c:	429a      	cmp	r2, r3
 800117e:	dbee      	blt.n	800115e <_ZN12SevenSegmentlsEPKc+0x9e>

		uint8_t idxStr = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	74bb      	strb	r3, [r7, #18]
		for(; idxStr < size; ++idxStr)
 8001184:	e00e      	b.n	80011a4 <_ZN12SevenSegmentlsEPKc+0xe4>
		{
			this->buffer[idx] = member[idxStr];
 8001186:	7cbb      	ldrb	r3, [r7, #18]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	441a      	add	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68d9      	ldr	r1, [r3, #12]
 8001190:	7d7b      	ldrb	r3, [r7, #21]
 8001192:	440b      	add	r3, r1
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	701a      	strb	r2, [r3, #0]
			++idx;
 8001198:	7d7b      	ldrb	r3, [r7, #21]
 800119a:	3301      	adds	r3, #1
 800119c:	757b      	strb	r3, [r7, #21]
		for(; idxStr < size; ++idxStr)
 800119e:	7cbb      	ldrb	r3, [r7, #18]
 80011a0:	3301      	adds	r3, #1
 80011a2:	74bb      	strb	r3, [r7, #18]
 80011a4:	7cba      	ldrb	r2, [r7, #18]
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d3ec      	bcc.n	8001186 <_ZN12SevenSegmentlsEPKc+0xc6>
 80011ac:	e008      	b.n	80011c0 <_ZN12SevenSegmentlsEPKc+0x100>
		}
	}
	else
	{
		sprintf(this->buffer, "%s", member);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	490d      	ldr	r1, [pc, #52]	@ (80011ec <_ZN12SevenSegmentlsEPKc+0x12c>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fc84 	bl	8002ac4 <siprintf>
		idx = size;
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	757b      	strb	r3, [r7, #21]
	}

	this->buffer[idx] = '\n';
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	4413      	add	r3, r2
 80011c8:	220a      	movs	r2, #10
 80011ca:	701a      	strb	r2, [r3, #0]
	delete[] member;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <_ZN12SevenSegmentlsEPKc+0x118>
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f001 fb90 	bl	80028f8 <_ZdaPv>

	this->message(this->buffer);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fdde 	bl	8000da0 <_ZN12SevenSegment7messageEPKc>

}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0800334c 	.word	0x0800334c

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f92b 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fc32 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f943 	bl	80014de <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001270:	f000 f90b 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000000 	.word	0x20000000
 800128c:	20000008 	.word	0x20000008
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000198 	.word	0x20000198

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000198 	.word	0x20000198

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	@ (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	@ (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e159      	b.n	80017c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8148 	bne.w	80017c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d005      	beq.n	800154a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001546:	2b02      	cmp	r3, #2
 8001548:	d130      	bne.n	80015ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	f003 0201 	and.w	r2, r3, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d017      	beq.n	80015e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d123      	bne.n	800163c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	08da      	lsrs	r2, r3, #3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3208      	adds	r2, #8
 80015fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	691a      	ldr	r2, [r3, #16]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	69b9      	ldr	r1, [r7, #24]
 8001638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0203 	and.w	r2, r3, #3
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80a2 	beq.w	80017c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b57      	ldr	r3, [pc, #348]	@ (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a56      	ldr	r2, [pc, #344]	@ (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b54      	ldr	r3, [pc, #336]	@ (80017e0 <HAL_GPIO_Init+0x2e8>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169a:	4a52      	ldr	r2, [pc, #328]	@ (80017e4 <HAL_GPIO_Init+0x2ec>)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	220f      	movs	r2, #15
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	@ (80017e8 <HAL_GPIO_Init+0x2f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d019      	beq.n	80016fa <HAL_GPIO_Init+0x202>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a48      	ldr	r2, [pc, #288]	@ (80017ec <HAL_GPIO_Init+0x2f4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d013      	beq.n	80016f6 <HAL_GPIO_Init+0x1fe>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a47      	ldr	r2, [pc, #284]	@ (80017f0 <HAL_GPIO_Init+0x2f8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d00d      	beq.n	80016f2 <HAL_GPIO_Init+0x1fa>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a46      	ldr	r2, [pc, #280]	@ (80017f4 <HAL_GPIO_Init+0x2fc>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d007      	beq.n	80016ee <HAL_GPIO_Init+0x1f6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a45      	ldr	r2, [pc, #276]	@ (80017f8 <HAL_GPIO_Init+0x300>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_GPIO_Init+0x1f2>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016ea:	2307      	movs	r3, #7
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x204>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	@ (80017e4 <HAL_GPIO_Init+0x2ec>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b38      	ldr	r3, [pc, #224]	@ (80017fc <HAL_GPIO_Init+0x304>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a2f      	ldr	r2, [pc, #188]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <HAL_GPIO_Init+0x304>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a1a      	ldr	r2, [pc, #104]	@ (80017fc <HAL_GPIO_Init+0x304>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <HAL_GPIO_Init+0x304>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a0f      	ldr	r2, [pc, #60]	@ (80017fc <HAL_GPIO_Init+0x304>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f aea2 	bls.w	8001514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40013c00 	.word	0x40013c00

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800181c:	e003      	b.n	8001826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	619a      	str	r2, [r3, #24]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e267      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d075      	beq.n	800193e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b04      	cmp	r3, #4
 800185c:	d00c      	beq.n	8001878 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185e:	4b85      	ldr	r3, [pc, #532]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001866:	2b08      	cmp	r3, #8
 8001868:	d112      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b82      	ldr	r3, [pc, #520]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b7e      	ldr	r3, [pc, #504]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d05b      	beq.n	800193c <HAL_RCC_OscConfig+0x108>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d157      	bne.n	800193c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e242      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x74>
 800189a:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01d      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x98>
 80018b2:	4b70      	ldr	r3, [pc, #448]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b6d      	ldr	r3, [pc, #436]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0xb0>
 80018cc:	4b69      	ldr	r3, [pc, #420]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a68      	ldr	r2, [pc, #416]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b66      	ldr	r3, [pc, #408]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a65      	ldr	r2, [pc, #404]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fce6 	bl	80012bc <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fce2 	bl	80012bc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	@ 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e207      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0xc0>
 8001912:	e014      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fcd2 	bl	80012bc <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800191c:	f7ff fcce 	bl	80012bc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b64      	cmp	r3, #100	@ 0x64
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e1f3      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	4b51      	ldr	r3, [pc, #324]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0xe8>
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d063      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800195e:	2b08      	cmp	r3, #8
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x152>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1c7      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x244>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff fc87 	bl	80012bc <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff fc83 	bl	80012bc <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1a8      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x244>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fc66 	bl	80012bc <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff fc62 	bl	80012bc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e187      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x248>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff fc46 	bl	80012bc <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc42 	bl	80012bc <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e167      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_OscConfig+0x240>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x200>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x248>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fc2f 	bl	80012bc <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fc2b 	bl	80012bc <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e150      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b88      	ldr	r3, [pc, #544]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b81      	ldr	r3, [pc, #516]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7d      	ldr	r3, [pc, #500]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b77      	ldr	r3, [pc, #476]	@ (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b74      	ldr	r3, [pc, #464]	@ (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a73      	ldr	r2, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff fbeb 	bl	80012bc <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff fbe7 	bl	80012bc <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e10c      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <HAL_RCC_OscConfig+0x474>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2ea>
 8001b10:	4b64      	ldr	r3, [pc, #400]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a63      	ldr	r2, [pc, #396]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x324>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x30c>
 8001b26:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5b      	ldr	r2, [pc, #364]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x324>
 8001b40:	4b58      	ldr	r3, [pc, #352]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b44:	4a57      	ldr	r2, [pc, #348]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4c:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a54      	ldr	r2, [pc, #336]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fbac 	bl	80012bc <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff fba8 	bl	80012bc <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0cb      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b49      	ldr	r3, [pc, #292]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x334>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff fb96 	bl	80012bc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff fb92 	bl	80012bc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0b5      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b39      	ldr	r3, [pc, #228]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a38      	ldr	r2, [pc, #224]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a1 	beq.w	8001d14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d05c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d141      	bne.n	8001c6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_RCC_OscConfig+0x478>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fb66 	bl	80012bc <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff fb62 	bl	80012bc <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e087      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	491b      	ldr	r1, [pc, #108]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x478>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb3b 	bl	80012bc <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fb37 	bl	80012bc <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e05c      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x416>
 8001c68:	e054      	b.n	8001d14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_OscConfig+0x478>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff fb24 	bl	80012bc <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff fb20 	bl	80012bc <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e045      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x444>
 8001c96:	e03d      	b.n	8001d14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e038      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <HAL_RCC_OscConfig+0x4ec>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d028      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d121      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11a      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d107      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0cc      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d90c      	bls.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b65      	ldr	r3, [pc, #404]	@ (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4e:	4b63      	ldr	r3, [pc, #396]	@ (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b8      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b59      	ldr	r3, [pc, #356]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a58      	ldr	r2, [pc, #352]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d90:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a52      	ldr	r2, [pc, #328]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d9c:	4b50      	ldr	r3, [pc, #320]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	494d      	ldr	r1, [pc, #308]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d044      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d119      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e07f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d003      	beq.n	8001de2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e06f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e067      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4934      	ldr	r1, [pc, #208]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7ff fa52 	bl	80012bc <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7ff fa4e 	bl	80012bc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e04f      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d20c      	bcs.n	8001e6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b22      	ldr	r3, [pc, #136]	@ (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_RCC_ClockConfig+0x1b8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e032      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4916      	ldr	r1, [pc, #88]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e96:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	490e      	ldr	r1, [pc, #56]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eaa:	f000 f821 	bl	8001ef0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	490a      	ldr	r1, [pc, #40]	@ (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec2:	4a09      	ldr	r2, [pc, #36]	@ (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f9b2 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	08003350 	.word	0x08003350
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ef4:	b090      	sub	sp, #64	@ 0x40
 8001ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f08:	4b59      	ldr	r3, [pc, #356]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d00d      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x40>
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	f200 80a1 	bhi.w	800205c <HAL_RCC_GetSysClockFreq+0x16c>
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0x34>
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f22:	e09b      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f24:	4b53      	ldr	r3, [pc, #332]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f28:	e09b      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f2a:	4b53      	ldr	r3, [pc, #332]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f2e:	e098      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f30:	4b4f      	ldr	r3, [pc, #316]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d028      	beq.n	8001f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f46:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	099b      	lsrs	r3, r3, #6
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f5c:	fb03 f201 	mul.w	r2, r3, r1
 8001f60:	2300      	movs	r3, #0
 8001f62:	fb00 f303 	mul.w	r3, r0, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f70:	460a      	mov	r2, r1
 8001f72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f76:	4413      	add	r3, r2
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	61fa      	str	r2, [r7, #28]
 8001f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f8a:	f7fe f979 	bl	8000280 <__aeabi_uldivmod>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4613      	mov	r3, r2
 8001f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f96:	e053      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f98:	4b35      	ldr	r3, [pc, #212]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	617a      	str	r2, [r7, #20]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001faa:	f04f 0b00 	mov.w	fp, #0
 8001fae:	4652      	mov	r2, sl
 8001fb0:	465b      	mov	r3, fp
 8001fb2:	f04f 0000 	mov.w	r0, #0
 8001fb6:	f04f 0100 	mov.w	r1, #0
 8001fba:	0159      	lsls	r1, r3, #5
 8001fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc0:	0150      	lsls	r0, r2, #5
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8001fca:	eb63 090b 	sbc.w	r9, r3, fp
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8001fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	00eb      	lsls	r3, r5, #3
 8001ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff8:	00e2      	lsls	r2, r4, #3
 8001ffa:	4614      	mov	r4, r2
 8001ffc:	461d      	mov	r5, r3
 8001ffe:	eb14 030a 	adds.w	r3, r4, sl
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	eb45 030b 	adc.w	r3, r5, fp
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002016:	4629      	mov	r1, r5
 8002018:	028b      	lsls	r3, r1, #10
 800201a:	4621      	mov	r1, r4
 800201c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002020:	4621      	mov	r1, r4
 8002022:	028a      	lsls	r2, r1, #10
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800202a:	2200      	movs	r2, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	60fa      	str	r2, [r7, #12]
 8002030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002034:	f7fe f924 	bl	8000280 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_RCC_GetSysClockFreq+0x180>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	3301      	adds	r3, #1
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002050:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800205a:	e002      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x184>)
 800205e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002064:	4618      	mov	r0, r3
 8002066:	3740      	adds	r7, #64	@ 0x40
 8002068:	46bd      	mov	sp, r7
 800206a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	00f42400 	.word	0x00f42400
 8002078:	017d7840 	.word	0x017d7840

0800207c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e041      	b.n	8002112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fd1a 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4610      	mov	r0, r2
 80020bc:	f000 fa7a 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d001      	beq.n	8002134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e044      	b.n	80021be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1e      	ldr	r2, [pc, #120]	@ (80021cc <HAL_TIM_Base_Start_IT+0xb0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d018      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215e:	d013      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1a      	ldr	r2, [pc, #104]	@ (80021d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00e      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d009      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0x6c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a16      	ldr	r2, [pc, #88]	@ (80021dc <HAL_TIM_Base_Start_IT+0xc0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d010      	beq.n	80021bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0201 	orr.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021aa:	e007      	b.n	80021bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40014000 	.word	0x40014000

080021e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d020      	beq.n	8002244 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01b      	beq.n	8002244 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0202 	mvn.w	r2, #2
 8002214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f9a3 	bl	8002576 <HAL_TIM_IC_CaptureCallback>
 8002230:	e005      	b.n	800223e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f995 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f9a6 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d020      	beq.n	8002290 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01b      	beq.n	8002290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0204 	mvn.w	r2, #4
 8002260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f97d 	bl	8002576 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f96f 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f980 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d020      	beq.n	80022dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0208 	mvn.w	r2, #8
 80022ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f957 	bl	8002576 <HAL_TIM_IC_CaptureCallback>
 80022c8:	e005      	b.n	80022d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f949 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f95a 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01b      	beq.n	8002328 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0210 	mvn.w	r2, #16
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2208      	movs	r2, #8
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f931 	bl	8002576 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f923 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f934 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0201 	mvn.w	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f901 	bl	800254e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00c      	beq.n	8002370 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 faba 	bl	80028e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00c      	beq.n	8002394 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f905 	bl	800259e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00c      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0220 	mvn.w	r2, #32
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fa8c 	bl	80028d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_ConfigClockSource+0x1c>
 80023d8:	2302      	movs	r3, #2
 80023da:	e0b4      	b.n	8002546 <HAL_TIM_ConfigClockSource+0x186>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002414:	d03e      	beq.n	8002494 <HAL_TIM_ConfigClockSource+0xd4>
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241a:	f200 8087 	bhi.w	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800241e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002422:	f000 8086 	beq.w	8002532 <HAL_TIM_ConfigClockSource+0x172>
 8002426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800242a:	d87f      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b70      	cmp	r3, #112	@ 0x70
 800242e:	d01a      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0xa6>
 8002430:	2b70      	cmp	r3, #112	@ 0x70
 8002432:	d87b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b60      	cmp	r3, #96	@ 0x60
 8002436:	d050      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x11a>
 8002438:	2b60      	cmp	r3, #96	@ 0x60
 800243a:	d877      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b50      	cmp	r3, #80	@ 0x50
 800243e:	d03c      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0xfa>
 8002440:	2b50      	cmp	r3, #80	@ 0x50
 8002442:	d873      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b40      	cmp	r3, #64	@ 0x40
 8002446:	d058      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x13a>
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d86f      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b30      	cmp	r3, #48	@ 0x30
 800244e:	d064      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002450:	2b30      	cmp	r3, #48	@ 0x30
 8002452:	d86b      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b20      	cmp	r3, #32
 8002456:	d060      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002458:	2b20      	cmp	r3, #32
 800245a:	d867      	bhi.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05c      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002460:	2b10      	cmp	r3, #16
 8002462:	d05a      	beq.n	800251a <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	e062      	b.n	800252c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002476:	f000 f99d 	bl	80027b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002488:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	609a      	str	r2, [r3, #8]
      break;
 8002492:	e04f      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024a4:	f000 f986 	bl	80027b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024b6:	609a      	str	r2, [r3, #8]
      break;
 80024b8:	e03c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c6:	461a      	mov	r2, r3
 80024c8:	f000 f8fa 	bl	80026c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2150      	movs	r1, #80	@ 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f953 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 80024d8:	e02c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024e6:	461a      	mov	r2, r3
 80024e8:	f000 f919 	bl	800271e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2160      	movs	r1, #96	@ 0x60
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f943 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 80024f8:	e01c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	461a      	mov	r2, r3
 8002508:	f000 f8da 	bl	80026c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f933 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 8002518:	e00c      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f000 f92a 	bl	800277e <TIM_ITRx_SetConfig>
      break;
 800252a:	e003      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e000      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002532:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a37      	ldr	r2, [pc, #220]	@ (80026a4 <TIM_Base_SetConfig+0xf0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00f      	beq.n	80025ec <TIM_Base_SetConfig+0x38>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d2:	d00b      	beq.n	80025ec <TIM_Base_SetConfig+0x38>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a34      	ldr	r2, [pc, #208]	@ (80026a8 <TIM_Base_SetConfig+0xf4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d007      	beq.n	80025ec <TIM_Base_SetConfig+0x38>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a33      	ldr	r2, [pc, #204]	@ (80026ac <TIM_Base_SetConfig+0xf8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <TIM_Base_SetConfig+0x38>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a32      	ldr	r2, [pc, #200]	@ (80026b0 <TIM_Base_SetConfig+0xfc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d108      	bne.n	80025fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <TIM_Base_SetConfig+0xf0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01b      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260c:	d017      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a25      	ldr	r2, [pc, #148]	@ (80026a8 <TIM_Base_SetConfig+0xf4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a24      	ldr	r2, [pc, #144]	@ (80026ac <TIM_Base_SetConfig+0xf8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00f      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a23      	ldr	r2, [pc, #140]	@ (80026b0 <TIM_Base_SetConfig+0xfc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00b      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <TIM_Base_SetConfig+0x100>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a21      	ldr	r2, [pc, #132]	@ (80026b8 <TIM_Base_SetConfig+0x104>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d003      	beq.n	800263e <TIM_Base_SetConfig+0x8a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a20      	ldr	r2, [pc, #128]	@ (80026bc <TIM_Base_SetConfig+0x108>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d108      	bne.n	8002650 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a0c      	ldr	r2, [pc, #48]	@ (80026a4 <TIM_Base_SetConfig+0xf0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d103      	bne.n	800267e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f043 0204 	orr.w	r2, r3, #4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800
 80026b0:	40000c00 	.word	0x40000c00
 80026b4:	40014000 	.word	0x40014000
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40014800 	.word	0x40014800

080026c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 0201 	bic.w	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f023 030a 	bic.w	r3, r3, #10
 80026fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	621a      	str	r2, [r3, #32]
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f023 0210 	bic.w	r2, r3, #16
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	031b      	lsls	r3, r3, #12
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800275a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	621a      	str	r2, [r3, #32]
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	f043 0307 	orr.w	r3, r3, #7
 80027a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002808:	2302      	movs	r3, #2
 800280a:	e050      	b.n	80028ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1c      	ldr	r2, [pc, #112]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002858:	d013      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a16      	ldr	r2, [pc, #88]	@ (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a15      	ldr	r2, [pc, #84]	@ (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a13      	ldr	r2, [pc, #76]	@ (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10c      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40000800 	.word	0x40000800
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	40014000 	.word	0x40014000

080028d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZdaPv>:
 80028f8:	f000 b802 	b.w	8002900 <_ZdlPv>

080028fc <_Znaj>:
 80028fc:	f000 b802 	b.w	8002904 <_Znwj>

08002900 <_ZdlPv>:
 8002900:	f000 b82a 	b.w	8002958 <free>

08002904 <_Znwj>:
 8002904:	2801      	cmp	r0, #1
 8002906:	bf38      	it	cc
 8002908:	2001      	movcc	r0, #1
 800290a:	b510      	push	{r4, lr}
 800290c:	4604      	mov	r4, r0
 800290e:	4620      	mov	r0, r4
 8002910:	f000 f81a 	bl	8002948 <malloc>
 8002914:	b100      	cbz	r0, 8002918 <_Znwj+0x14>
 8002916:	bd10      	pop	{r4, pc}
 8002918:	f000 f806 	bl	8002928 <_ZSt15get_new_handlerv>
 800291c:	b908      	cbnz	r0, 8002922 <_Znwj+0x1e>
 800291e:	f000 f80b 	bl	8002938 <abort>
 8002922:	4780      	blx	r0
 8002924:	e7f3      	b.n	800290e <_Znwj+0xa>
	...

08002928 <_ZSt15get_new_handlerv>:
 8002928:	4b02      	ldr	r3, [pc, #8]	@ (8002934 <_ZSt15get_new_handlerv+0xc>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f3bf 8f5b 	dmb	ish
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2000019c 	.word	0x2000019c

08002938 <abort>:
 8002938:	b508      	push	{r3, lr}
 800293a:	2006      	movs	r0, #6
 800293c:	f000 f914 	bl	8002b68 <raise>
 8002940:	2001      	movs	r0, #1
 8002942:	f7fe f973 	bl	8000c2c <_exit>
	...

08002948 <malloc>:
 8002948:	4b02      	ldr	r3, [pc, #8]	@ (8002954 <malloc+0xc>)
 800294a:	4601      	mov	r1, r0
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f000 b82d 	b.w	80029ac <_malloc_r>
 8002952:	bf00      	nop
 8002954:	2000000c 	.word	0x2000000c

08002958 <free>:
 8002958:	4b02      	ldr	r3, [pc, #8]	@ (8002964 <free+0xc>)
 800295a:	4601      	mov	r1, r0
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	f000 b95b 	b.w	8002c18 <_free_r>
 8002962:	bf00      	nop
 8002964:	2000000c 	.word	0x2000000c

08002968 <sbrk_aligned>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4e0f      	ldr	r6, [pc, #60]	@ (80029a8 <sbrk_aligned+0x40>)
 800296c:	460c      	mov	r4, r1
 800296e:	6831      	ldr	r1, [r6, #0]
 8002970:	4605      	mov	r5, r0
 8002972:	b911      	cbnz	r1, 800297a <sbrk_aligned+0x12>
 8002974:	f000 f914 	bl	8002ba0 <_sbrk_r>
 8002978:	6030      	str	r0, [r6, #0]
 800297a:	4621      	mov	r1, r4
 800297c:	4628      	mov	r0, r5
 800297e:	f000 f90f 	bl	8002ba0 <_sbrk_r>
 8002982:	1c43      	adds	r3, r0, #1
 8002984:	d103      	bne.n	800298e <sbrk_aligned+0x26>
 8002986:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800298a:	4620      	mov	r0, r4
 800298c:	bd70      	pop	{r4, r5, r6, pc}
 800298e:	1cc4      	adds	r4, r0, #3
 8002990:	f024 0403 	bic.w	r4, r4, #3
 8002994:	42a0      	cmp	r0, r4
 8002996:	d0f8      	beq.n	800298a <sbrk_aligned+0x22>
 8002998:	1a21      	subs	r1, r4, r0
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f900 	bl	8002ba0 <_sbrk_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d1f2      	bne.n	800298a <sbrk_aligned+0x22>
 80029a4:	e7ef      	b.n	8002986 <sbrk_aligned+0x1e>
 80029a6:	bf00      	nop
 80029a8:	200001a0 	.word	0x200001a0

080029ac <_malloc_r>:
 80029ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029b0:	1ccd      	adds	r5, r1, #3
 80029b2:	f025 0503 	bic.w	r5, r5, #3
 80029b6:	3508      	adds	r5, #8
 80029b8:	2d0c      	cmp	r5, #12
 80029ba:	bf38      	it	cc
 80029bc:	250c      	movcc	r5, #12
 80029be:	2d00      	cmp	r5, #0
 80029c0:	4606      	mov	r6, r0
 80029c2:	db01      	blt.n	80029c8 <_malloc_r+0x1c>
 80029c4:	42a9      	cmp	r1, r5
 80029c6:	d904      	bls.n	80029d2 <_malloc_r+0x26>
 80029c8:	230c      	movs	r3, #12
 80029ca:	6033      	str	r3, [r6, #0]
 80029cc:	2000      	movs	r0, #0
 80029ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002aa8 <_malloc_r+0xfc>
 80029d6:	f000 f869 	bl	8002aac <__malloc_lock>
 80029da:	f8d8 3000 	ldr.w	r3, [r8]
 80029de:	461c      	mov	r4, r3
 80029e0:	bb44      	cbnz	r4, 8002a34 <_malloc_r+0x88>
 80029e2:	4629      	mov	r1, r5
 80029e4:	4630      	mov	r0, r6
 80029e6:	f7ff ffbf 	bl	8002968 <sbrk_aligned>
 80029ea:	1c43      	adds	r3, r0, #1
 80029ec:	4604      	mov	r4, r0
 80029ee:	d158      	bne.n	8002aa2 <_malloc_r+0xf6>
 80029f0:	f8d8 4000 	ldr.w	r4, [r8]
 80029f4:	4627      	mov	r7, r4
 80029f6:	2f00      	cmp	r7, #0
 80029f8:	d143      	bne.n	8002a82 <_malloc_r+0xd6>
 80029fa:	2c00      	cmp	r4, #0
 80029fc:	d04b      	beq.n	8002a96 <_malloc_r+0xea>
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	4639      	mov	r1, r7
 8002a02:	4630      	mov	r0, r6
 8002a04:	eb04 0903 	add.w	r9, r4, r3
 8002a08:	f000 f8ca 	bl	8002ba0 <_sbrk_r>
 8002a0c:	4581      	cmp	r9, r0
 8002a0e:	d142      	bne.n	8002a96 <_malloc_r+0xea>
 8002a10:	6821      	ldr	r1, [r4, #0]
 8002a12:	1a6d      	subs	r5, r5, r1
 8002a14:	4629      	mov	r1, r5
 8002a16:	4630      	mov	r0, r6
 8002a18:	f7ff ffa6 	bl	8002968 <sbrk_aligned>
 8002a1c:	3001      	adds	r0, #1
 8002a1e:	d03a      	beq.n	8002a96 <_malloc_r+0xea>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	442b      	add	r3, r5
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	f8d8 3000 	ldr.w	r3, [r8]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	bb62      	cbnz	r2, 8002a88 <_malloc_r+0xdc>
 8002a2e:	f8c8 7000 	str.w	r7, [r8]
 8002a32:	e00f      	b.n	8002a54 <_malloc_r+0xa8>
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	1b52      	subs	r2, r2, r5
 8002a38:	d420      	bmi.n	8002a7c <_malloc_r+0xd0>
 8002a3a:	2a0b      	cmp	r2, #11
 8002a3c:	d917      	bls.n	8002a6e <_malloc_r+0xc2>
 8002a3e:	1961      	adds	r1, r4, r5
 8002a40:	42a3      	cmp	r3, r4
 8002a42:	6025      	str	r5, [r4, #0]
 8002a44:	bf18      	it	ne
 8002a46:	6059      	strne	r1, [r3, #4]
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	bf08      	it	eq
 8002a4c:	f8c8 1000 	streq.w	r1, [r8]
 8002a50:	5162      	str	r2, [r4, r5]
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	4630      	mov	r0, r6
 8002a56:	f000 f82f 	bl	8002ab8 <__malloc_unlock>
 8002a5a:	f104 000b 	add.w	r0, r4, #11
 8002a5e:	1d23      	adds	r3, r4, #4
 8002a60:	f020 0007 	bic.w	r0, r0, #7
 8002a64:	1ac2      	subs	r2, r0, r3
 8002a66:	bf1c      	itt	ne
 8002a68:	1a1b      	subne	r3, r3, r0
 8002a6a:	50a3      	strne	r3, [r4, r2]
 8002a6c:	e7af      	b.n	80029ce <_malloc_r+0x22>
 8002a6e:	6862      	ldr	r2, [r4, #4]
 8002a70:	42a3      	cmp	r3, r4
 8002a72:	bf0c      	ite	eq
 8002a74:	f8c8 2000 	streq.w	r2, [r8]
 8002a78:	605a      	strne	r2, [r3, #4]
 8002a7a:	e7eb      	b.n	8002a54 <_malloc_r+0xa8>
 8002a7c:	4623      	mov	r3, r4
 8002a7e:	6864      	ldr	r4, [r4, #4]
 8002a80:	e7ae      	b.n	80029e0 <_malloc_r+0x34>
 8002a82:	463c      	mov	r4, r7
 8002a84:	687f      	ldr	r7, [r7, #4]
 8002a86:	e7b6      	b.n	80029f6 <_malloc_r+0x4a>
 8002a88:	461a      	mov	r2, r3
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	d1fb      	bne.n	8002a88 <_malloc_r+0xdc>
 8002a90:	2300      	movs	r3, #0
 8002a92:	6053      	str	r3, [r2, #4]
 8002a94:	e7de      	b.n	8002a54 <_malloc_r+0xa8>
 8002a96:	230c      	movs	r3, #12
 8002a98:	6033      	str	r3, [r6, #0]
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f000 f80c 	bl	8002ab8 <__malloc_unlock>
 8002aa0:	e794      	b.n	80029cc <_malloc_r+0x20>
 8002aa2:	6005      	str	r5, [r0, #0]
 8002aa4:	e7d6      	b.n	8002a54 <_malloc_r+0xa8>
 8002aa6:	bf00      	nop
 8002aa8:	200001a4 	.word	0x200001a4

08002aac <__malloc_lock>:
 8002aac:	4801      	ldr	r0, [pc, #4]	@ (8002ab4 <__malloc_lock+0x8>)
 8002aae:	f000 b8b1 	b.w	8002c14 <__retarget_lock_acquire_recursive>
 8002ab2:	bf00      	nop
 8002ab4:	200002e4 	.word	0x200002e4

08002ab8 <__malloc_unlock>:
 8002ab8:	4801      	ldr	r0, [pc, #4]	@ (8002ac0 <__malloc_unlock+0x8>)
 8002aba:	f000 b8ac 	b.w	8002c16 <__retarget_lock_release_recursive>
 8002abe:	bf00      	nop
 8002ac0:	200002e4 	.word	0x200002e4

08002ac4 <siprintf>:
 8002ac4:	b40e      	push	{r1, r2, r3}
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	b09d      	sub	sp, #116	@ 0x74
 8002aca:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002acc:	9002      	str	r0, [sp, #8]
 8002ace:	9006      	str	r0, [sp, #24]
 8002ad0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ad4:	480a      	ldr	r0, [pc, #40]	@ (8002b00 <siprintf+0x3c>)
 8002ad6:	9107      	str	r1, [sp, #28]
 8002ad8:	9104      	str	r1, [sp, #16]
 8002ada:	490a      	ldr	r1, [pc, #40]	@ (8002b04 <siprintf+0x40>)
 8002adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ae0:	9105      	str	r1, [sp, #20]
 8002ae2:	2400      	movs	r4, #0
 8002ae4:	a902      	add	r1, sp, #8
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002aec:	f000 f93a 	bl	8002d64 <_svfiprintf_r>
 8002af0:	9b02      	ldr	r3, [sp, #8]
 8002af2:	701c      	strb	r4, [r3, #0]
 8002af4:	b01d      	add	sp, #116	@ 0x74
 8002af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002afa:	b003      	add	sp, #12
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	ffff0208 	.word	0xffff0208

08002b08 <memset>:
 8002b08:	4402      	add	r2, r0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <memset+0xa>
 8002b10:	4770      	bx	lr
 8002b12:	f803 1b01 	strb.w	r1, [r3], #1
 8002b16:	e7f9      	b.n	8002b0c <memset+0x4>

08002b18 <_raise_r>:
 8002b18:	291f      	cmp	r1, #31
 8002b1a:	b538      	push	{r3, r4, r5, lr}
 8002b1c:	4605      	mov	r5, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	d904      	bls.n	8002b2c <_raise_r+0x14>
 8002b22:	2316      	movs	r3, #22
 8002b24:	6003      	str	r3, [r0, #0]
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002b2e:	b112      	cbz	r2, 8002b36 <_raise_r+0x1e>
 8002b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b34:	b94b      	cbnz	r3, 8002b4a <_raise_r+0x32>
 8002b36:	4628      	mov	r0, r5
 8002b38:	f000 f830 	bl	8002b9c <_getpid_r>
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	4601      	mov	r1, r0
 8002b40:	4628      	mov	r0, r5
 8002b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b46:	f000 b817 	b.w	8002b78 <_kill_r>
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d00a      	beq.n	8002b64 <_raise_r+0x4c>
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	d103      	bne.n	8002b5a <_raise_r+0x42>
 8002b52:	2316      	movs	r3, #22
 8002b54:	6003      	str	r3, [r0, #0]
 8002b56:	2001      	movs	r0, #1
 8002b58:	e7e7      	b.n	8002b2a <_raise_r+0x12>
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002b60:	4620      	mov	r0, r4
 8002b62:	4798      	blx	r3
 8002b64:	2000      	movs	r0, #0
 8002b66:	e7e0      	b.n	8002b2a <_raise_r+0x12>

08002b68 <raise>:
 8002b68:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <raise+0xc>)
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f7ff bfd3 	b.w	8002b18 <_raise_r>
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c

08002b78 <_kill_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4d07      	ldr	r5, [pc, #28]	@ (8002b98 <_kill_r+0x20>)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4604      	mov	r4, r0
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	602b      	str	r3, [r5, #0]
 8002b86:	f7fe f841 	bl	8000c0c <_kill>
 8002b8a:	1c43      	adds	r3, r0, #1
 8002b8c:	d102      	bne.n	8002b94 <_kill_r+0x1c>
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	b103      	cbz	r3, 8002b94 <_kill_r+0x1c>
 8002b92:	6023      	str	r3, [r4, #0]
 8002b94:	bd38      	pop	{r3, r4, r5, pc}
 8002b96:	bf00      	nop
 8002b98:	200002e0 	.word	0x200002e0

08002b9c <_getpid_r>:
 8002b9c:	f7fe b82e 	b.w	8000bfc <_getpid>

08002ba0 <_sbrk_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4d06      	ldr	r5, [pc, #24]	@ (8002bbc <_sbrk_r+0x1c>)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	4608      	mov	r0, r1
 8002baa:	602b      	str	r3, [r5, #0]
 8002bac:	f7fe f84a 	bl	8000c44 <_sbrk>
 8002bb0:	1c43      	adds	r3, r0, #1
 8002bb2:	d102      	bne.n	8002bba <_sbrk_r+0x1a>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	b103      	cbz	r3, 8002bba <_sbrk_r+0x1a>
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
 8002bbc:	200002e0 	.word	0x200002e0

08002bc0 <__errno>:
 8002bc0:	4b01      	ldr	r3, [pc, #4]	@ (8002bc8 <__errno+0x8>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	4d0d      	ldr	r5, [pc, #52]	@ (8002c04 <__libc_init_array+0x38>)
 8002bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8002c08 <__libc_init_array+0x3c>)
 8002bd2:	1b64      	subs	r4, r4, r5
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8002c0c <__libc_init_array+0x40>)
 8002bde:	4c0c      	ldr	r4, [pc, #48]	@ (8002c10 <__libc_init_array+0x44>)
 8002be0:	f000 fba6 	bl	8003330 <_init>
 8002be4:	1b64      	subs	r4, r4, r5
 8002be6:	10a4      	asrs	r4, r4, #2
 8002be8:	2600      	movs	r6, #0
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	080033c4 	.word	0x080033c4
 8002c08:	080033c4 	.word	0x080033c4
 8002c0c:	080033c4 	.word	0x080033c4
 8002c10:	080033c8 	.word	0x080033c8

08002c14 <__retarget_lock_acquire_recursive>:
 8002c14:	4770      	bx	lr

08002c16 <__retarget_lock_release_recursive>:
 8002c16:	4770      	bx	lr

08002c18 <_free_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4605      	mov	r5, r0
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	d041      	beq.n	8002ca4 <_free_r+0x8c>
 8002c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c24:	1f0c      	subs	r4, r1, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bfb8      	it	lt
 8002c2a:	18e4      	addlt	r4, r4, r3
 8002c2c:	f7ff ff3e 	bl	8002aac <__malloc_lock>
 8002c30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <_free_r+0x90>)
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	b933      	cbnz	r3, 8002c44 <_free_r+0x2c>
 8002c36:	6063      	str	r3, [r4, #4]
 8002c38:	6014      	str	r4, [r2, #0]
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c40:	f7ff bf3a 	b.w	8002ab8 <__malloc_unlock>
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d908      	bls.n	8002c5a <_free_r+0x42>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	1821      	adds	r1, r4, r0
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	bf01      	itttt	eq
 8002c50:	6819      	ldreq	r1, [r3, #0]
 8002c52:	685b      	ldreq	r3, [r3, #4]
 8002c54:	1809      	addeq	r1, r1, r0
 8002c56:	6021      	streq	r1, [r4, #0]
 8002c58:	e7ed      	b.n	8002c36 <_free_r+0x1e>
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b10b      	cbz	r3, 8002c64 <_free_r+0x4c>
 8002c60:	42a3      	cmp	r3, r4
 8002c62:	d9fa      	bls.n	8002c5a <_free_r+0x42>
 8002c64:	6811      	ldr	r1, [r2, #0]
 8002c66:	1850      	adds	r0, r2, r1
 8002c68:	42a0      	cmp	r0, r4
 8002c6a:	d10b      	bne.n	8002c84 <_free_r+0x6c>
 8002c6c:	6820      	ldr	r0, [r4, #0]
 8002c6e:	4401      	add	r1, r0
 8002c70:	1850      	adds	r0, r2, r1
 8002c72:	4283      	cmp	r3, r0
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	d1e0      	bne.n	8002c3a <_free_r+0x22>
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	6053      	str	r3, [r2, #4]
 8002c7e:	4408      	add	r0, r1
 8002c80:	6010      	str	r0, [r2, #0]
 8002c82:	e7da      	b.n	8002c3a <_free_r+0x22>
 8002c84:	d902      	bls.n	8002c8c <_free_r+0x74>
 8002c86:	230c      	movs	r3, #12
 8002c88:	602b      	str	r3, [r5, #0]
 8002c8a:	e7d6      	b.n	8002c3a <_free_r+0x22>
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	1821      	adds	r1, r4, r0
 8002c90:	428b      	cmp	r3, r1
 8002c92:	bf04      	itt	eq
 8002c94:	6819      	ldreq	r1, [r3, #0]
 8002c96:	685b      	ldreq	r3, [r3, #4]
 8002c98:	6063      	str	r3, [r4, #4]
 8002c9a:	bf04      	itt	eq
 8002c9c:	1809      	addeq	r1, r1, r0
 8002c9e:	6021      	streq	r1, [r4, #0]
 8002ca0:	6054      	str	r4, [r2, #4]
 8002ca2:	e7ca      	b.n	8002c3a <_free_r+0x22>
 8002ca4:	bd38      	pop	{r3, r4, r5, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200001a4 	.word	0x200001a4

08002cac <__ssputs_r>:
 8002cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb0:	688e      	ldr	r6, [r1, #8]
 8002cb2:	461f      	mov	r7, r3
 8002cb4:	42be      	cmp	r6, r7
 8002cb6:	680b      	ldr	r3, [r1, #0]
 8002cb8:	4682      	mov	sl, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4690      	mov	r8, r2
 8002cbe:	d82d      	bhi.n	8002d1c <__ssputs_r+0x70>
 8002cc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002cc8:	d026      	beq.n	8002d18 <__ssputs_r+0x6c>
 8002cca:	6965      	ldr	r5, [r4, #20]
 8002ccc:	6909      	ldr	r1, [r1, #16]
 8002cce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cd2:	eba3 0901 	sub.w	r9, r3, r1
 8002cd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cda:	1c7b      	adds	r3, r7, #1
 8002cdc:	444b      	add	r3, r9
 8002cde:	106d      	asrs	r5, r5, #1
 8002ce0:	429d      	cmp	r5, r3
 8002ce2:	bf38      	it	cc
 8002ce4:	461d      	movcc	r5, r3
 8002ce6:	0553      	lsls	r3, r2, #21
 8002ce8:	d527      	bpl.n	8002d3a <__ssputs_r+0x8e>
 8002cea:	4629      	mov	r1, r5
 8002cec:	f7ff fe5e 	bl	80029ac <_malloc_r>
 8002cf0:	4606      	mov	r6, r0
 8002cf2:	b360      	cbz	r0, 8002d4e <__ssputs_r+0xa2>
 8002cf4:	6921      	ldr	r1, [r4, #16]
 8002cf6:	464a      	mov	r2, r9
 8002cf8:	f000 fad6 	bl	80032a8 <memcpy>
 8002cfc:	89a3      	ldrh	r3, [r4, #12]
 8002cfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d06:	81a3      	strh	r3, [r4, #12]
 8002d08:	6126      	str	r6, [r4, #16]
 8002d0a:	6165      	str	r5, [r4, #20]
 8002d0c:	444e      	add	r6, r9
 8002d0e:	eba5 0509 	sub.w	r5, r5, r9
 8002d12:	6026      	str	r6, [r4, #0]
 8002d14:	60a5      	str	r5, [r4, #8]
 8002d16:	463e      	mov	r6, r7
 8002d18:	42be      	cmp	r6, r7
 8002d1a:	d900      	bls.n	8002d1e <__ssputs_r+0x72>
 8002d1c:	463e      	mov	r6, r7
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	4632      	mov	r2, r6
 8002d22:	4641      	mov	r1, r8
 8002d24:	f000 faa6 	bl	8003274 <memmove>
 8002d28:	68a3      	ldr	r3, [r4, #8]
 8002d2a:	1b9b      	subs	r3, r3, r6
 8002d2c:	60a3      	str	r3, [r4, #8]
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	4433      	add	r3, r6
 8002d32:	6023      	str	r3, [r4, #0]
 8002d34:	2000      	movs	r0, #0
 8002d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d3a:	462a      	mov	r2, r5
 8002d3c:	f000 fac2 	bl	80032c4 <_realloc_r>
 8002d40:	4606      	mov	r6, r0
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d1e0      	bne.n	8002d08 <__ssputs_r+0x5c>
 8002d46:	6921      	ldr	r1, [r4, #16]
 8002d48:	4650      	mov	r0, sl
 8002d4a:	f7ff ff65 	bl	8002c18 <_free_r>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	f8ca 3000 	str.w	r3, [sl]
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d5a:	81a3      	strh	r3, [r4, #12]
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d60:	e7e9      	b.n	8002d36 <__ssputs_r+0x8a>
	...

08002d64 <_svfiprintf_r>:
 8002d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d68:	4698      	mov	r8, r3
 8002d6a:	898b      	ldrh	r3, [r1, #12]
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	b09d      	sub	sp, #116	@ 0x74
 8002d70:	4607      	mov	r7, r0
 8002d72:	460d      	mov	r5, r1
 8002d74:	4614      	mov	r4, r2
 8002d76:	d510      	bpl.n	8002d9a <_svfiprintf_r+0x36>
 8002d78:	690b      	ldr	r3, [r1, #16]
 8002d7a:	b973      	cbnz	r3, 8002d9a <_svfiprintf_r+0x36>
 8002d7c:	2140      	movs	r1, #64	@ 0x40
 8002d7e:	f7ff fe15 	bl	80029ac <_malloc_r>
 8002d82:	6028      	str	r0, [r5, #0]
 8002d84:	6128      	str	r0, [r5, #16]
 8002d86:	b930      	cbnz	r0, 8002d96 <_svfiprintf_r+0x32>
 8002d88:	230c      	movs	r3, #12
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d90:	b01d      	add	sp, #116	@ 0x74
 8002d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d96:	2340      	movs	r3, #64	@ 0x40
 8002d98:	616b      	str	r3, [r5, #20]
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d9e:	2320      	movs	r3, #32
 8002da0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002da8:	2330      	movs	r3, #48	@ 0x30
 8002daa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002f48 <_svfiprintf_r+0x1e4>
 8002dae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002db2:	f04f 0901 	mov.w	r9, #1
 8002db6:	4623      	mov	r3, r4
 8002db8:	469a      	mov	sl, r3
 8002dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dbe:	b10a      	cbz	r2, 8002dc4 <_svfiprintf_r+0x60>
 8002dc0:	2a25      	cmp	r2, #37	@ 0x25
 8002dc2:	d1f9      	bne.n	8002db8 <_svfiprintf_r+0x54>
 8002dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8002dc8:	d00b      	beq.n	8002de2 <_svfiprintf_r+0x7e>
 8002dca:	465b      	mov	r3, fp
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4638      	mov	r0, r7
 8002dd2:	f7ff ff6b 	bl	8002cac <__ssputs_r>
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	f000 80a7 	beq.w	8002f2a <_svfiprintf_r+0x1c6>
 8002ddc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dde:	445a      	add	r2, fp
 8002de0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002de2:	f89a 3000 	ldrb.w	r3, [sl]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 809f 	beq.w	8002f2a <_svfiprintf_r+0x1c6>
 8002dec:	2300      	movs	r3, #0
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002df6:	f10a 0a01 	add.w	sl, sl, #1
 8002dfa:	9304      	str	r3, [sp, #16]
 8002dfc:	9307      	str	r3, [sp, #28]
 8002dfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e02:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e04:	4654      	mov	r4, sl
 8002e06:	2205      	movs	r2, #5
 8002e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e0c:	484e      	ldr	r0, [pc, #312]	@ (8002f48 <_svfiprintf_r+0x1e4>)
 8002e0e:	f7fd f9e7 	bl	80001e0 <memchr>
 8002e12:	9a04      	ldr	r2, [sp, #16]
 8002e14:	b9d8      	cbnz	r0, 8002e4e <_svfiprintf_r+0xea>
 8002e16:	06d0      	lsls	r0, r2, #27
 8002e18:	bf44      	itt	mi
 8002e1a:	2320      	movmi	r3, #32
 8002e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e20:	0711      	lsls	r1, r2, #28
 8002e22:	bf44      	itt	mi
 8002e24:	232b      	movmi	r3, #43	@ 0x2b
 8002e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e30:	d015      	beq.n	8002e5e <_svfiprintf_r+0xfa>
 8002e32:	9a07      	ldr	r2, [sp, #28]
 8002e34:	4654      	mov	r4, sl
 8002e36:	2000      	movs	r0, #0
 8002e38:	f04f 0c0a 	mov.w	ip, #10
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e42:	3b30      	subs	r3, #48	@ 0x30
 8002e44:	2b09      	cmp	r3, #9
 8002e46:	d94b      	bls.n	8002ee0 <_svfiprintf_r+0x17c>
 8002e48:	b1b0      	cbz	r0, 8002e78 <_svfiprintf_r+0x114>
 8002e4a:	9207      	str	r2, [sp, #28]
 8002e4c:	e014      	b.n	8002e78 <_svfiprintf_r+0x114>
 8002e4e:	eba0 0308 	sub.w	r3, r0, r8
 8002e52:	fa09 f303 	lsl.w	r3, r9, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	9304      	str	r3, [sp, #16]
 8002e5a:	46a2      	mov	sl, r4
 8002e5c:	e7d2      	b.n	8002e04 <_svfiprintf_r+0xa0>
 8002e5e:	9b03      	ldr	r3, [sp, #12]
 8002e60:	1d19      	adds	r1, r3, #4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	9103      	str	r1, [sp, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bfbb      	ittet	lt
 8002e6a:	425b      	neglt	r3, r3
 8002e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e70:	9307      	strge	r3, [sp, #28]
 8002e72:	9307      	strlt	r3, [sp, #28]
 8002e74:	bfb8      	it	lt
 8002e76:	9204      	strlt	r2, [sp, #16]
 8002e78:	7823      	ldrb	r3, [r4, #0]
 8002e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e7c:	d10a      	bne.n	8002e94 <_svfiprintf_r+0x130>
 8002e7e:	7863      	ldrb	r3, [r4, #1]
 8002e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e82:	d132      	bne.n	8002eea <_svfiprintf_r+0x186>
 8002e84:	9b03      	ldr	r3, [sp, #12]
 8002e86:	1d1a      	adds	r2, r3, #4
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	9203      	str	r2, [sp, #12]
 8002e8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e90:	3402      	adds	r4, #2
 8002e92:	9305      	str	r3, [sp, #20]
 8002e94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002f58 <_svfiprintf_r+0x1f4>
 8002e98:	7821      	ldrb	r1, [r4, #0]
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	4650      	mov	r0, sl
 8002e9e:	f7fd f99f 	bl	80001e0 <memchr>
 8002ea2:	b138      	cbz	r0, 8002eb4 <_svfiprintf_r+0x150>
 8002ea4:	9b04      	ldr	r3, [sp, #16]
 8002ea6:	eba0 000a 	sub.w	r0, r0, sl
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	4082      	lsls	r2, r0
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	3401      	adds	r4, #1
 8002eb2:	9304      	str	r3, [sp, #16]
 8002eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb8:	4824      	ldr	r0, [pc, #144]	@ (8002f4c <_svfiprintf_r+0x1e8>)
 8002eba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ebe:	2206      	movs	r2, #6
 8002ec0:	f7fd f98e 	bl	80001e0 <memchr>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d036      	beq.n	8002f36 <_svfiprintf_r+0x1d2>
 8002ec8:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <_svfiprintf_r+0x1ec>)
 8002eca:	bb1b      	cbnz	r3, 8002f14 <_svfiprintf_r+0x1b0>
 8002ecc:	9b03      	ldr	r3, [sp, #12]
 8002ece:	3307      	adds	r3, #7
 8002ed0:	f023 0307 	bic.w	r3, r3, #7
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	9303      	str	r3, [sp, #12]
 8002ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eda:	4433      	add	r3, r6
 8002edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ede:	e76a      	b.n	8002db6 <_svfiprintf_r+0x52>
 8002ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	e7a8      	b.n	8002e3c <_svfiprintf_r+0xd8>
 8002eea:	2300      	movs	r3, #0
 8002eec:	3401      	adds	r4, #1
 8002eee:	9305      	str	r3, [sp, #20]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f04f 0c0a 	mov.w	ip, #10
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002efc:	3a30      	subs	r2, #48	@ 0x30
 8002efe:	2a09      	cmp	r2, #9
 8002f00:	d903      	bls.n	8002f0a <_svfiprintf_r+0x1a6>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0c6      	beq.n	8002e94 <_svfiprintf_r+0x130>
 8002f06:	9105      	str	r1, [sp, #20]
 8002f08:	e7c4      	b.n	8002e94 <_svfiprintf_r+0x130>
 8002f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f0e:	4604      	mov	r4, r0
 8002f10:	2301      	movs	r3, #1
 8002f12:	e7f0      	b.n	8002ef6 <_svfiprintf_r+0x192>
 8002f14:	ab03      	add	r3, sp, #12
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	462a      	mov	r2, r5
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <_svfiprintf_r+0x1f0>)
 8002f1c:	a904      	add	r1, sp, #16
 8002f1e:	4638      	mov	r0, r7
 8002f20:	f3af 8000 	nop.w
 8002f24:	1c42      	adds	r2, r0, #1
 8002f26:	4606      	mov	r6, r0
 8002f28:	d1d6      	bne.n	8002ed8 <_svfiprintf_r+0x174>
 8002f2a:	89ab      	ldrh	r3, [r5, #12]
 8002f2c:	065b      	lsls	r3, r3, #25
 8002f2e:	f53f af2d 	bmi.w	8002d8c <_svfiprintf_r+0x28>
 8002f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f34:	e72c      	b.n	8002d90 <_svfiprintf_r+0x2c>
 8002f36:	ab03      	add	r3, sp, #12
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	462a      	mov	r2, r5
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <_svfiprintf_r+0x1f0>)
 8002f3e:	a904      	add	r1, sp, #16
 8002f40:	4638      	mov	r0, r7
 8002f42:	f000 f879 	bl	8003038 <_printf_i>
 8002f46:	e7ed      	b.n	8002f24 <_svfiprintf_r+0x1c0>
 8002f48:	08003389 	.word	0x08003389
 8002f4c:	08003393 	.word	0x08003393
 8002f50:	00000000 	.word	0x00000000
 8002f54:	08002cad 	.word	0x08002cad
 8002f58:	0800338f 	.word	0x0800338f

08002f5c <_printf_common>:
 8002f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f60:	4616      	mov	r6, r2
 8002f62:	4698      	mov	r8, r3
 8002f64:	688a      	ldr	r2, [r1, #8]
 8002f66:	690b      	ldr	r3, [r1, #16]
 8002f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	bfb8      	it	lt
 8002f70:	4613      	movlt	r3, r2
 8002f72:	6033      	str	r3, [r6, #0]
 8002f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f78:	4607      	mov	r7, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	b10a      	cbz	r2, 8002f82 <_printf_common+0x26>
 8002f7e:	3301      	adds	r3, #1
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	0699      	lsls	r1, r3, #26
 8002f86:	bf42      	ittt	mi
 8002f88:	6833      	ldrmi	r3, [r6, #0]
 8002f8a:	3302      	addmi	r3, #2
 8002f8c:	6033      	strmi	r3, [r6, #0]
 8002f8e:	6825      	ldr	r5, [r4, #0]
 8002f90:	f015 0506 	ands.w	r5, r5, #6
 8002f94:	d106      	bne.n	8002fa4 <_printf_common+0x48>
 8002f96:	f104 0a19 	add.w	sl, r4, #25
 8002f9a:	68e3      	ldr	r3, [r4, #12]
 8002f9c:	6832      	ldr	r2, [r6, #0]
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	42ab      	cmp	r3, r5
 8002fa2:	dc26      	bgt.n	8002ff2 <_printf_common+0x96>
 8002fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	3b00      	subs	r3, #0
 8002fac:	bf18      	it	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	0692      	lsls	r2, r2, #26
 8002fb2:	d42b      	bmi.n	800300c <_printf_common+0xb0>
 8002fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fb8:	4641      	mov	r1, r8
 8002fba:	4638      	mov	r0, r7
 8002fbc:	47c8      	blx	r9
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d01e      	beq.n	8003000 <_printf_common+0xa4>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	6922      	ldr	r2, [r4, #16]
 8002fc6:	f003 0306 	and.w	r3, r3, #6
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf02      	ittt	eq
 8002fce:	68e5      	ldreq	r5, [r4, #12]
 8002fd0:	6833      	ldreq	r3, [r6, #0]
 8002fd2:	1aed      	subeq	r5, r5, r3
 8002fd4:	68a3      	ldr	r3, [r4, #8]
 8002fd6:	bf0c      	ite	eq
 8002fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fdc:	2500      	movne	r5, #0
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bfc4      	itt	gt
 8002fe2:	1a9b      	subgt	r3, r3, r2
 8002fe4:	18ed      	addgt	r5, r5, r3
 8002fe6:	2600      	movs	r6, #0
 8002fe8:	341a      	adds	r4, #26
 8002fea:	42b5      	cmp	r5, r6
 8002fec:	d11a      	bne.n	8003024 <_printf_common+0xc8>
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e008      	b.n	8003004 <_printf_common+0xa8>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4652      	mov	r2, sl
 8002ff6:	4641      	mov	r1, r8
 8002ff8:	4638      	mov	r0, r7
 8002ffa:	47c8      	blx	r9
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d103      	bne.n	8003008 <_printf_common+0xac>
 8003000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003008:	3501      	adds	r5, #1
 800300a:	e7c6      	b.n	8002f9a <_printf_common+0x3e>
 800300c:	18e1      	adds	r1, r4, r3
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	2030      	movs	r0, #48	@ 0x30
 8003012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003016:	4422      	add	r2, r4
 8003018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800301c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003020:	3302      	adds	r3, #2
 8003022:	e7c7      	b.n	8002fb4 <_printf_common+0x58>
 8003024:	2301      	movs	r3, #1
 8003026:	4622      	mov	r2, r4
 8003028:	4641      	mov	r1, r8
 800302a:	4638      	mov	r0, r7
 800302c:	47c8      	blx	r9
 800302e:	3001      	adds	r0, #1
 8003030:	d0e6      	beq.n	8003000 <_printf_common+0xa4>
 8003032:	3601      	adds	r6, #1
 8003034:	e7d9      	b.n	8002fea <_printf_common+0x8e>
	...

08003038 <_printf_i>:
 8003038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800303c:	7e0f      	ldrb	r7, [r1, #24]
 800303e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003040:	2f78      	cmp	r7, #120	@ 0x78
 8003042:	4691      	mov	r9, r2
 8003044:	4680      	mov	r8, r0
 8003046:	460c      	mov	r4, r1
 8003048:	469a      	mov	sl, r3
 800304a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800304e:	d807      	bhi.n	8003060 <_printf_i+0x28>
 8003050:	2f62      	cmp	r7, #98	@ 0x62
 8003052:	d80a      	bhi.n	800306a <_printf_i+0x32>
 8003054:	2f00      	cmp	r7, #0
 8003056:	f000 80d1 	beq.w	80031fc <_printf_i+0x1c4>
 800305a:	2f58      	cmp	r7, #88	@ 0x58
 800305c:	f000 80b8 	beq.w	80031d0 <_printf_i+0x198>
 8003060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003068:	e03a      	b.n	80030e0 <_printf_i+0xa8>
 800306a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800306e:	2b15      	cmp	r3, #21
 8003070:	d8f6      	bhi.n	8003060 <_printf_i+0x28>
 8003072:	a101      	add	r1, pc, #4	@ (adr r1, 8003078 <_printf_i+0x40>)
 8003074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003078:	080030d1 	.word	0x080030d1
 800307c:	080030e5 	.word	0x080030e5
 8003080:	08003061 	.word	0x08003061
 8003084:	08003061 	.word	0x08003061
 8003088:	08003061 	.word	0x08003061
 800308c:	08003061 	.word	0x08003061
 8003090:	080030e5 	.word	0x080030e5
 8003094:	08003061 	.word	0x08003061
 8003098:	08003061 	.word	0x08003061
 800309c:	08003061 	.word	0x08003061
 80030a0:	08003061 	.word	0x08003061
 80030a4:	080031e3 	.word	0x080031e3
 80030a8:	0800310f 	.word	0x0800310f
 80030ac:	0800319d 	.word	0x0800319d
 80030b0:	08003061 	.word	0x08003061
 80030b4:	08003061 	.word	0x08003061
 80030b8:	08003205 	.word	0x08003205
 80030bc:	08003061 	.word	0x08003061
 80030c0:	0800310f 	.word	0x0800310f
 80030c4:	08003061 	.word	0x08003061
 80030c8:	08003061 	.word	0x08003061
 80030cc:	080031a5 	.word	0x080031a5
 80030d0:	6833      	ldr	r3, [r6, #0]
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6032      	str	r2, [r6, #0]
 80030d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030e0:	2301      	movs	r3, #1
 80030e2:	e09c      	b.n	800321e <_printf_i+0x1e6>
 80030e4:	6833      	ldr	r3, [r6, #0]
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	1d19      	adds	r1, r3, #4
 80030ea:	6031      	str	r1, [r6, #0]
 80030ec:	0606      	lsls	r6, r0, #24
 80030ee:	d501      	bpl.n	80030f4 <_printf_i+0xbc>
 80030f0:	681d      	ldr	r5, [r3, #0]
 80030f2:	e003      	b.n	80030fc <_printf_i+0xc4>
 80030f4:	0645      	lsls	r5, r0, #25
 80030f6:	d5fb      	bpl.n	80030f0 <_printf_i+0xb8>
 80030f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030fc:	2d00      	cmp	r5, #0
 80030fe:	da03      	bge.n	8003108 <_printf_i+0xd0>
 8003100:	232d      	movs	r3, #45	@ 0x2d
 8003102:	426d      	negs	r5, r5
 8003104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003108:	4858      	ldr	r0, [pc, #352]	@ (800326c <_printf_i+0x234>)
 800310a:	230a      	movs	r3, #10
 800310c:	e011      	b.n	8003132 <_printf_i+0xfa>
 800310e:	6821      	ldr	r1, [r4, #0]
 8003110:	6833      	ldr	r3, [r6, #0]
 8003112:	0608      	lsls	r0, r1, #24
 8003114:	f853 5b04 	ldr.w	r5, [r3], #4
 8003118:	d402      	bmi.n	8003120 <_printf_i+0xe8>
 800311a:	0649      	lsls	r1, r1, #25
 800311c:	bf48      	it	mi
 800311e:	b2ad      	uxthmi	r5, r5
 8003120:	2f6f      	cmp	r7, #111	@ 0x6f
 8003122:	4852      	ldr	r0, [pc, #328]	@ (800326c <_printf_i+0x234>)
 8003124:	6033      	str	r3, [r6, #0]
 8003126:	bf14      	ite	ne
 8003128:	230a      	movne	r3, #10
 800312a:	2308      	moveq	r3, #8
 800312c:	2100      	movs	r1, #0
 800312e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003132:	6866      	ldr	r6, [r4, #4]
 8003134:	60a6      	str	r6, [r4, #8]
 8003136:	2e00      	cmp	r6, #0
 8003138:	db05      	blt.n	8003146 <_printf_i+0x10e>
 800313a:	6821      	ldr	r1, [r4, #0]
 800313c:	432e      	orrs	r6, r5
 800313e:	f021 0104 	bic.w	r1, r1, #4
 8003142:	6021      	str	r1, [r4, #0]
 8003144:	d04b      	beq.n	80031de <_printf_i+0x1a6>
 8003146:	4616      	mov	r6, r2
 8003148:	fbb5 f1f3 	udiv	r1, r5, r3
 800314c:	fb03 5711 	mls	r7, r3, r1, r5
 8003150:	5dc7      	ldrb	r7, [r0, r7]
 8003152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003156:	462f      	mov	r7, r5
 8003158:	42bb      	cmp	r3, r7
 800315a:	460d      	mov	r5, r1
 800315c:	d9f4      	bls.n	8003148 <_printf_i+0x110>
 800315e:	2b08      	cmp	r3, #8
 8003160:	d10b      	bne.n	800317a <_printf_i+0x142>
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	07df      	lsls	r7, r3, #31
 8003166:	d508      	bpl.n	800317a <_printf_i+0x142>
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	6861      	ldr	r1, [r4, #4]
 800316c:	4299      	cmp	r1, r3
 800316e:	bfde      	ittt	le
 8003170:	2330      	movle	r3, #48	@ 0x30
 8003172:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003176:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800317a:	1b92      	subs	r2, r2, r6
 800317c:	6122      	str	r2, [r4, #16]
 800317e:	f8cd a000 	str.w	sl, [sp]
 8003182:	464b      	mov	r3, r9
 8003184:	aa03      	add	r2, sp, #12
 8003186:	4621      	mov	r1, r4
 8003188:	4640      	mov	r0, r8
 800318a:	f7ff fee7 	bl	8002f5c <_printf_common>
 800318e:	3001      	adds	r0, #1
 8003190:	d14a      	bne.n	8003228 <_printf_i+0x1f0>
 8003192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003196:	b004      	add	sp, #16
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f043 0320 	orr.w	r3, r3, #32
 80031a2:	6023      	str	r3, [r4, #0]
 80031a4:	4832      	ldr	r0, [pc, #200]	@ (8003270 <_printf_i+0x238>)
 80031a6:	2778      	movs	r7, #120	@ 0x78
 80031a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	6831      	ldr	r1, [r6, #0]
 80031b0:	061f      	lsls	r7, r3, #24
 80031b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80031b6:	d402      	bmi.n	80031be <_printf_i+0x186>
 80031b8:	065f      	lsls	r7, r3, #25
 80031ba:	bf48      	it	mi
 80031bc:	b2ad      	uxthmi	r5, r5
 80031be:	6031      	str	r1, [r6, #0]
 80031c0:	07d9      	lsls	r1, r3, #31
 80031c2:	bf44      	itt	mi
 80031c4:	f043 0320 	orrmi.w	r3, r3, #32
 80031c8:	6023      	strmi	r3, [r4, #0]
 80031ca:	b11d      	cbz	r5, 80031d4 <_printf_i+0x19c>
 80031cc:	2310      	movs	r3, #16
 80031ce:	e7ad      	b.n	800312c <_printf_i+0xf4>
 80031d0:	4826      	ldr	r0, [pc, #152]	@ (800326c <_printf_i+0x234>)
 80031d2:	e7e9      	b.n	80031a8 <_printf_i+0x170>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	f023 0320 	bic.w	r3, r3, #32
 80031da:	6023      	str	r3, [r4, #0]
 80031dc:	e7f6      	b.n	80031cc <_printf_i+0x194>
 80031de:	4616      	mov	r6, r2
 80031e0:	e7bd      	b.n	800315e <_printf_i+0x126>
 80031e2:	6833      	ldr	r3, [r6, #0]
 80031e4:	6825      	ldr	r5, [r4, #0]
 80031e6:	6961      	ldr	r1, [r4, #20]
 80031e8:	1d18      	adds	r0, r3, #4
 80031ea:	6030      	str	r0, [r6, #0]
 80031ec:	062e      	lsls	r6, r5, #24
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	d501      	bpl.n	80031f6 <_printf_i+0x1be>
 80031f2:	6019      	str	r1, [r3, #0]
 80031f4:	e002      	b.n	80031fc <_printf_i+0x1c4>
 80031f6:	0668      	lsls	r0, r5, #25
 80031f8:	d5fb      	bpl.n	80031f2 <_printf_i+0x1ba>
 80031fa:	8019      	strh	r1, [r3, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	6123      	str	r3, [r4, #16]
 8003200:	4616      	mov	r6, r2
 8003202:	e7bc      	b.n	800317e <_printf_i+0x146>
 8003204:	6833      	ldr	r3, [r6, #0]
 8003206:	1d1a      	adds	r2, r3, #4
 8003208:	6032      	str	r2, [r6, #0]
 800320a:	681e      	ldr	r6, [r3, #0]
 800320c:	6862      	ldr	r2, [r4, #4]
 800320e:	2100      	movs	r1, #0
 8003210:	4630      	mov	r0, r6
 8003212:	f7fc ffe5 	bl	80001e0 <memchr>
 8003216:	b108      	cbz	r0, 800321c <_printf_i+0x1e4>
 8003218:	1b80      	subs	r0, r0, r6
 800321a:	6060      	str	r0, [r4, #4]
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	6123      	str	r3, [r4, #16]
 8003220:	2300      	movs	r3, #0
 8003222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003226:	e7aa      	b.n	800317e <_printf_i+0x146>
 8003228:	6923      	ldr	r3, [r4, #16]
 800322a:	4632      	mov	r2, r6
 800322c:	4649      	mov	r1, r9
 800322e:	4640      	mov	r0, r8
 8003230:	47d0      	blx	sl
 8003232:	3001      	adds	r0, #1
 8003234:	d0ad      	beq.n	8003192 <_printf_i+0x15a>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	079b      	lsls	r3, r3, #30
 800323a:	d413      	bmi.n	8003264 <_printf_i+0x22c>
 800323c:	68e0      	ldr	r0, [r4, #12]
 800323e:	9b03      	ldr	r3, [sp, #12]
 8003240:	4298      	cmp	r0, r3
 8003242:	bfb8      	it	lt
 8003244:	4618      	movlt	r0, r3
 8003246:	e7a6      	b.n	8003196 <_printf_i+0x15e>
 8003248:	2301      	movs	r3, #1
 800324a:	4632      	mov	r2, r6
 800324c:	4649      	mov	r1, r9
 800324e:	4640      	mov	r0, r8
 8003250:	47d0      	blx	sl
 8003252:	3001      	adds	r0, #1
 8003254:	d09d      	beq.n	8003192 <_printf_i+0x15a>
 8003256:	3501      	adds	r5, #1
 8003258:	68e3      	ldr	r3, [r4, #12]
 800325a:	9903      	ldr	r1, [sp, #12]
 800325c:	1a5b      	subs	r3, r3, r1
 800325e:	42ab      	cmp	r3, r5
 8003260:	dcf2      	bgt.n	8003248 <_printf_i+0x210>
 8003262:	e7eb      	b.n	800323c <_printf_i+0x204>
 8003264:	2500      	movs	r5, #0
 8003266:	f104 0619 	add.w	r6, r4, #25
 800326a:	e7f5      	b.n	8003258 <_printf_i+0x220>
 800326c:	0800339a 	.word	0x0800339a
 8003270:	080033ab 	.word	0x080033ab

08003274 <memmove>:
 8003274:	4288      	cmp	r0, r1
 8003276:	b510      	push	{r4, lr}
 8003278:	eb01 0402 	add.w	r4, r1, r2
 800327c:	d902      	bls.n	8003284 <memmove+0x10>
 800327e:	4284      	cmp	r4, r0
 8003280:	4623      	mov	r3, r4
 8003282:	d807      	bhi.n	8003294 <memmove+0x20>
 8003284:	1e43      	subs	r3, r0, #1
 8003286:	42a1      	cmp	r1, r4
 8003288:	d008      	beq.n	800329c <memmove+0x28>
 800328a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800328e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003292:	e7f8      	b.n	8003286 <memmove+0x12>
 8003294:	4402      	add	r2, r0
 8003296:	4601      	mov	r1, r0
 8003298:	428a      	cmp	r2, r1
 800329a:	d100      	bne.n	800329e <memmove+0x2a>
 800329c:	bd10      	pop	{r4, pc}
 800329e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032a6:	e7f7      	b.n	8003298 <memmove+0x24>

080032a8 <memcpy>:
 80032a8:	440a      	add	r2, r1
 80032aa:	4291      	cmp	r1, r2
 80032ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80032b0:	d100      	bne.n	80032b4 <memcpy+0xc>
 80032b2:	4770      	bx	lr
 80032b4:	b510      	push	{r4, lr}
 80032b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032be:	4291      	cmp	r1, r2
 80032c0:	d1f9      	bne.n	80032b6 <memcpy+0xe>
 80032c2:	bd10      	pop	{r4, pc}

080032c4 <_realloc_r>:
 80032c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032c8:	4607      	mov	r7, r0
 80032ca:	4614      	mov	r4, r2
 80032cc:	460d      	mov	r5, r1
 80032ce:	b921      	cbnz	r1, 80032da <_realloc_r+0x16>
 80032d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032d4:	4611      	mov	r1, r2
 80032d6:	f7ff bb69 	b.w	80029ac <_malloc_r>
 80032da:	b92a      	cbnz	r2, 80032e8 <_realloc_r+0x24>
 80032dc:	f7ff fc9c 	bl	8002c18 <_free_r>
 80032e0:	4625      	mov	r5, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e8:	f000 f81a 	bl	8003320 <_malloc_usable_size_r>
 80032ec:	4284      	cmp	r4, r0
 80032ee:	4606      	mov	r6, r0
 80032f0:	d802      	bhi.n	80032f8 <_realloc_r+0x34>
 80032f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032f6:	d8f4      	bhi.n	80032e2 <_realloc_r+0x1e>
 80032f8:	4621      	mov	r1, r4
 80032fa:	4638      	mov	r0, r7
 80032fc:	f7ff fb56 	bl	80029ac <_malloc_r>
 8003300:	4680      	mov	r8, r0
 8003302:	b908      	cbnz	r0, 8003308 <_realloc_r+0x44>
 8003304:	4645      	mov	r5, r8
 8003306:	e7ec      	b.n	80032e2 <_realloc_r+0x1e>
 8003308:	42b4      	cmp	r4, r6
 800330a:	4622      	mov	r2, r4
 800330c:	4629      	mov	r1, r5
 800330e:	bf28      	it	cs
 8003310:	4632      	movcs	r2, r6
 8003312:	f7ff ffc9 	bl	80032a8 <memcpy>
 8003316:	4629      	mov	r1, r5
 8003318:	4638      	mov	r0, r7
 800331a:	f7ff fc7d 	bl	8002c18 <_free_r>
 800331e:	e7f1      	b.n	8003304 <_realloc_r+0x40>

08003320 <_malloc_usable_size_r>:
 8003320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003324:	1f18      	subs	r0, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfbc      	itt	lt
 800332a:	580b      	ldrlt	r3, [r1, r0]
 800332c:	18c0      	addlt	r0, r0, r3
 800332e:	4770      	bx	lr

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	bf00      	nop
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	bf00      	nop
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
