
SevenSegmentExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d8  080033d8  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080033d8  080033d8  000043d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e0  080033e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033e4  080033e4  000043e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080033e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08003444  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08003444  000052e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce34  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9b  00000000  00000000  00011ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00013e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000849  00000000  00000000  00014930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a36  00000000  00000000  00015179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd7f  00000000  00000000  0002ebaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc07  00000000  00000000  0003a92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  000ca578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000cd950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800334c 	.word	0x0800334c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800334c 	.word	0x0800334c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08e      	sub	sp, #56	@ 0x38
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fe2b 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f883 	bl	80006c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f9a5 	bl	8000908 <_ZL12MX_GPIO_Initv>
  MX_TIM10_Init();
 80005be:	f000 f94f 	bl	8000860 <_ZL13MX_TIM10_Initv>
  MX_TIM11_Init();
 80005c2:	f000 f977 	bl	80008b4 <_ZL13MX_TIM11_Initv>
  MX_TIM2_Init();
 80005c6:	f000 f8ef 	bl	80007a8 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

	//Seven segment initialize
	SevenSegment display;
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fba7 	bl	8000d22 <_ZN12SevenSegmentC1Ev>

	static segmentsPin segPin[8];
	segPin[0].port = segmentA_GPIO_Port;
 80005d4:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <main+0xf4>)
 80005d6:	4a33      	ldr	r2, [pc, #204]	@ (80006a4 <main+0xf8>)
 80005d8:	601a      	str	r2, [r3, #0]
	segPin[0].pin = segmentA_Pin;
 80005da:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <main+0xf4>)
 80005dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005e0:	809a      	strh	r2, [r3, #4]
	segPin[1].port = segmentB_GPIO_Port;
 80005e2:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <main+0xf4>)
 80005e4:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <main+0xf8>)
 80005e6:	609a      	str	r2, [r3, #8]
	segPin[1].pin = segmentB_Pin;
 80005e8:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <main+0xf4>)
 80005ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80005ee:	819a      	strh	r2, [r3, #12]
	segPin[2].port = segmentC_GPIO_Port;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <main+0xf4>)
 80005f2:	4a2d      	ldr	r2, [pc, #180]	@ (80006a8 <main+0xfc>)
 80005f4:	611a      	str	r2, [r3, #16]
	segPin[2].pin = segmentC_Pin;
 80005f6:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <main+0xf4>)
 80005f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fc:	829a      	strh	r2, [r3, #20]
	segPin[3].port = segmentD_GPIO_Port;
 80005fe:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <main+0xf4>)
 8000600:	4a29      	ldr	r2, [pc, #164]	@ (80006a8 <main+0xfc>)
 8000602:	619a      	str	r2, [r3, #24]
	segPin[3].pin = segmentD_Pin;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <main+0xf4>)
 8000606:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800060a:	839a      	strh	r2, [r3, #28]
	segPin[4].port = segmentE_GPIO_Port;
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <main+0xf4>)
 800060e:	4a27      	ldr	r2, [pc, #156]	@ (80006ac <main+0x100>)
 8000610:	621a      	str	r2, [r3, #32]
	segPin[4].pin = segmentE_Pin;
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0xf4>)
 8000614:	2240      	movs	r2, #64	@ 0x40
 8000616:	849a      	strh	r2, [r3, #36]	@ 0x24
	segPin[5].port = segmentF_GPIO_Port;
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <main+0xf4>)
 800061a:	4a22      	ldr	r2, [pc, #136]	@ (80006a4 <main+0xf8>)
 800061c:	629a      	str	r2, [r3, #40]	@ 0x28
	segPin[5].pin = segmentF_Pin;
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <main+0xf4>)
 8000620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000624:	859a      	strh	r2, [r3, #44]	@ 0x2c
	segPin[6].port = segmentG_GPIO_Port;
 8000626:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <main+0xf4>)
 8000628:	4a20      	ldr	r2, [pc, #128]	@ (80006ac <main+0x100>)
 800062a:	631a      	str	r2, [r3, #48]	@ 0x30
	segPin[6].pin = segmentG_Pin;
 800062c:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <main+0xf4>)
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	869a      	strh	r2, [r3, #52]	@ 0x34
	segPin[7].port = segmentP_GPIO_Port;
 8000632:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <main+0xf4>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <main+0xf8>)
 8000636:	639a      	str	r2, [r3, #56]	@ 0x38
	segPin[7].pin = segmentP_Pin;
 8000638:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <main+0xf4>)
 800063a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800063e:	879a      	strh	r2, [r3, #60]	@ 0x3c


	segmentDigit segDig[3];
	segDig[0].port = digOnes_GPIO_Port;
 8000640:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <main+0xfc>)
 8000642:	607b      	str	r3, [r7, #4]
	segDig[0].pin = digOnes_Pin;
 8000644:	2340      	movs	r3, #64	@ 0x40
 8000646:	813b      	strh	r3, [r7, #8]
	segDig[1].port = digTens_GPIO_Port;
 8000648:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <main+0x104>)
 800064a:	60fb      	str	r3, [r7, #12]
	segDig[1].pin = digTens_Pin;
 800064c:	2304      	movs	r3, #4
 800064e:	823b      	strh	r3, [r7, #16]
	segDig[2].port = digHundreds_GPIO_Port;
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <main+0x100>)
 8000652:	617b      	str	r3, [r7, #20]
	segDig[2].pin = digHundreds_Pin;
 8000654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000658:	833b      	strh	r3, [r7, #24]

	display.intilization(segPin, segDig, 3, true);
 800065a:	1d3a      	adds	r2, r7, #4
 800065c:	f107 001c 	add.w	r0, r7, #28
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2303      	movs	r3, #3
 8000666:	490e      	ldr	r1, [pc, #56]	@ (80006a0 <main+0xf4>)
 8000668:	f000 fb66 	bl	8000d38 <_ZN12SevenSegment12intilizationERA8_K11segmentsPinPK12segmentDigithb>
	pDisplay = &display;
 800066c:	4a11      	ldr	r2, [pc, #68]	@ (80006b4 <main+0x108>)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	6013      	str	r3, [r2, #0]


	//Start the Timer TIM2 in Interrupt mode
	  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000674:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <main+0x10c>)
 8000676:	f001 fd5f 	bl	8002138 <HAL_TIM_Base_Start_IT>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf14      	ite	ne
 8000680:	2301      	movne	r3, #1
 8000682:	2300      	moveq	r3, #0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <main+0xe2>
	  {
	    /* Starting Error */
	    Error_Handler();
 800068a:	f000 f9f1 	bl	8000a70 <Error_Handler>
	  }

	//display.setNumber(-3);
 	//display.setNumberF(1.5);
 	//display.message("FFF");
 	display << "tEh";
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	490a      	ldr	r1, [pc, #40]	@ (80006bc <main+0x110>)
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fd21 	bl	80010dc <_ZN12SevenSegmentlsEPKc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0xee>
 800069e:	bf00      	nop
 80006a0:	20000154 	.word	0x20000154
 80006a4:	40020000 	.word	0x40020000
 80006a8:	40020400 	.word	0x40020400
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	20000150 	.word	0x20000150
 80006b8:	20000078 	.word	0x20000078
 80006bc:	08003364 	.word	0x08003364

080006c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	@ 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fa28 	bl	8002b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <_Z18SystemClock_Configv+0xe0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <_Z18SystemClock_Configv+0xe0>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <_Z18SystemClock_Configv+0xe0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <_Z18SystemClock_Configv+0xe4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a25      	ldr	r2, [pc, #148]	@ (80007a4 <_Z18SystemClock_Configv+0xe4>)
 800070e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <_Z18SystemClock_Configv+0xe4>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000738:	2350      	movs	r3, #80	@ 0x50
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f881 	bl	8001850 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	bf14      	ite	ne
 8000754:	2301      	movne	r3, #1
 8000756:	2300      	moveq	r3, #0
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800075e:	f000 f987 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fade 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000794:	f000 f96c 	bl	8000a70 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	@ 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80007cc:	4b23      	ldr	r3, [pc, #140]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33333 - 1;
 80007d8:	4b20      	ldr	r3, [pc, #128]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007da:	f248 2234 	movw	r2, #33332	@ 0x8234
 80007de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ec:	481b      	ldr	r0, [pc, #108]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 80007ee:	f001 fc53 	bl	8002098 <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8000802:	f000 f935 	bl	8000a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	4812      	ldr	r0, [pc, #72]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 8000814:	f001 fde2 	bl	80023dc <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	bf14      	ite	ne
 800081e:	2301      	movne	r3, #1
 8000820:	2300      	moveq	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8000828:	f000 f922 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000834:	463b      	mov	r3, r7
 8000836:	4619      	mov	r1, r3
 8000838:	4808      	ldr	r0, [pc, #32]	@ (800085c <_ZL12MX_TIM2_Initv+0xb4>)
 800083a:	f001 ffe9 	bl	8002810 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	bf14      	ite	ne
 8000844:	2301      	movne	r3, #1
 8000846:	2300      	moveq	r3, #0
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 800084e:	f000 f90f 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000078 	.word	0x20000078

08000860 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <_ZL13MX_TIM10_Initv+0x50>)
 8000868:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8000 - 1;
 800086a:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 800086c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000870:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65485 - 1;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 800087a:	f64f 72cc 	movw	r2, #65484	@ 0xffcc
 800087e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <_ZL13MX_TIM10_Initv+0x4c>)
 800088e:	f001 fc03 	bl	8002098 <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_ZL13MX_TIM10_Initv+0x46>
  {
    Error_Handler();
 80008a2:	f000 f8e5 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	40014400 	.word	0x40014400

080008b4 <_ZL13MX_TIM11_Initv>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <_ZL13MX_TIM11_Initv+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8000 - 1;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008c0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80008c4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000 - 1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008ce:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008d2:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80008e0:	4807      	ldr	r0, [pc, #28]	@ (8000900 <_ZL13MX_TIM11_Initv+0x4c>)
 80008e2:	f001 fbd9 	bl	8002098 <HAL_TIM_Base_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf14      	ite	ne
 80008ec:	2301      	movne	r3, #1
 80008ee:	2300      	moveq	r3, #0
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <_ZL13MX_TIM11_Initv+0x46>
  {
    Error_Handler();
 80008f6:	f000 f8bb 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000108 	.word	0x20000108
 8000904:	40014800 	.word	0x40014800

08000908 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b4e      	ldr	r3, [pc, #312]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a4d      	ldr	r2, [pc, #308]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b4b      	ldr	r3, [pc, #300]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b47      	ldr	r3, [pc, #284]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a46      	ldr	r2, [pc, #280]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b44      	ldr	r3, [pc, #272]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b3d      	ldr	r3, [pc, #244]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b39      	ldr	r3, [pc, #228]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a38      	ldr	r2, [pc, #224]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <_ZL12MX_GPIO_Initv+0x154>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, segmentC_Pin|segmentD_Pin|digOnes_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f24c 0140 	movw	r1, #49216	@ 0xc040
 8000994:	4832      	ldr	r0, [pc, #200]	@ (8000a60 <_ZL12MX_GPIO_Initv+0x158>)
 8000996:	f000 ff41 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, segmentE_Pin|segmentG_Pin|digHundreds_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80009a0:	4830      	ldr	r0, [pc, #192]	@ (8000a64 <_ZL12MX_GPIO_Initv+0x15c>)
 80009a2:	f000 ff3b 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segmentF_Pin|segmentP_Pin|segmentA_Pin|segmentB_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 80009ac:	482e      	ldr	r0, [pc, #184]	@ (8000a68 <_ZL12MX_GPIO_Initv+0x160>)
 80009ae:	f000 ff35 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(digTens_GPIO_Port, digTens_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2104      	movs	r1, #4
 80009b6:	482d      	ldr	r0, [pc, #180]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x164>)
 80009b8:	f000 ff30 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009bc:	2360      	movs	r3, #96	@ 0x60
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009cc:	2305      	movs	r3, #5
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4824      	ldr	r0, [pc, #144]	@ (8000a68 <_ZL12MX_GPIO_Initv+0x160>)
 80009d8:	f000 fd9c 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentC_Pin segmentD_Pin digOnes_Pin */
  GPIO_InitStruct.Pin = segmentC_Pin|segmentD_Pin|digOnes_Pin;
 80009dc:	f24c 0340 	movw	r3, #49216	@ 0xc040
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	481a      	ldr	r0, [pc, #104]	@ (8000a60 <_ZL12MX_GPIO_Initv+0x158>)
 80009f6:	f000 fd8d 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentE_Pin segmentG_Pin digHundreds_Pin */
  GPIO_InitStruct.Pin = segmentE_Pin|segmentG_Pin|digHundreds_Pin;
 80009fa:	f44f 5386 	mov.w	r3, #4288	@ 0x10c0
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <_ZL12MX_GPIO_Initv+0x15c>)
 8000a14:	f000 fd7e 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentF_Pin segmentP_Pin segmentA_Pin segmentB_Pin */
  GPIO_InitStruct.Pin = segmentF_Pin|segmentP_Pin|segmentA_Pin|segmentB_Pin;
 8000a18:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480d      	ldr	r0, [pc, #52]	@ (8000a68 <_ZL12MX_GPIO_Initv+0x160>)
 8000a32:	f000 fd6f 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : digTens_Pin */
  GPIO_InitStruct.Pin = digTens_Pin;
 8000a36:	2304      	movs	r3, #4
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(digTens_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	@ (8000a6c <_ZL12MX_GPIO_Initv+0x164>)
 8000a4e:	f000 fd61 	bl	8001514 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000adc:	d116      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	201c      	movs	r0, #28
 8000b00:	f000 fcd1 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b04:	201c      	movs	r0, #28
 8000b06:	f000 fcea 	bl	80014de <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000b0a:	e026      	b.n	8000b5a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <HAL_TIM_Base_MspInit+0x9c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a11      	ldr	r2, [pc, #68]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
}
 8000b32:	e012      	b.n	8000b5a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM11)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0c      	ldr	r2, [pc, #48]	@ (8000b6c <HAL_TIM_Base_MspInit+0xa0>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10d      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_TIM_Base_MspInit+0x98>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40014400 	.word	0x40014400
 8000b6c:	40014800 	.word	0x40014800

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 fb73 	bl	80012b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd4:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <TIM2_IRQHandler+0x20>)
 8000bd6:	f001 fb11 	bl	80021fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(pDisplay != nullptr)
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <TIM2_IRQHandler+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <TIM2_IRQHandler+0x1c>
  	  pDisplay->refreshDisplay();
 8000be2:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <TIM2_IRQHandler+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f998 	bl	8000f1c <_ZNV12SevenSegment14refreshDisplayEv>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000078 	.word	0x20000078
 8000bf4:	20000150 	.word	0x20000150

08000bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return 1;
 8000bfc:	2301      	movs	r3, #1
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_kill>:

int _kill(int pid, int sig)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c12:	f001 ffe3 	bl	8002bdc <__errno>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2216      	movs	r2, #22
 8000c1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_exit>:

void _exit (int status)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffe7 	bl	8000c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c3a:	bf00      	nop
 8000c3c:	e7fd      	b.n	8000c3a <_exit+0x12>
	...

08000c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c48:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <_sbrk+0x5c>)
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <_sbrk+0x60>)
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c54:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d102      	bne.n	8000c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <_sbrk+0x64>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <_sbrk+0x68>)
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d207      	bcs.n	8000c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c70:	f001 ffb4 	bl	8002bdc <__errno>
 8000c74:	4603      	mov	r3, r0
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c7e:	e009      	b.n	8000c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <_sbrk+0x64>)
 8000c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20018000 	.word	0x20018000
 8000ca0:	00000400 	.word	0x00000400
 8000ca4:	20000194 	.word	0x20000194
 8000ca8:	200002e8 	.word	0x200002e8

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:
 8000ce2:	58d4      	ldr	r4, [r2, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:
 8000ce8:	18c4      	adds	r4, r0, r3
 8000cea:	428c      	cmp	r4, r1
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:
 8000cfa:	42a2      	cmp	r2, r4
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>
 8000cfe:	f001 ff73 	bl	8002be8 <__libc_init_array>
 8000d02:	f7ff fc53 	bl	80005ac <main>
 8000d06:	4770      	bx	lr
 8000d08:	20018000 	.word	0x20018000
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	2000005c 	.word	0x2000005c
 8000d14:	080033e8 	.word	0x080033e8
 8000d18:	2000005c 	.word	0x2000005c
 8000d1c:	200002e8 	.word	0x200002e8

08000d20 <ADC_IRQHandler>:
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>

08000d22 <_ZN12SevenSegmentC1Ev>:
 *      Author: eng. Hristian Rusev
 */

#include "SevenSegment.h"

SevenSegment::SevenSegment()
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
{

}
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_ZN12SevenSegment12intilizationERA8_K11segmentsPinPK12segmentDigithb>:
	buffer = new char[(2*numberDigits)+1];

}

void SevenSegment::intilization(const segmentsPin (&pins)[8], const segmentDigit *digits, uint8_t segmentDigits_, bool commonCathode_)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	70fb      	strb	r3, [r7, #3]
	segmentPin = pins;					//struct with seven segments pins
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	601a      	str	r2, [r3, #0]
	digitsPin = digits; 					//struct with digits pins
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	605a      	str	r2, [r3, #4]
	numberDigits = segmentDigits_; 			//number of digits
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	78fa      	ldrb	r2, [r7, #3]
 8000d56:	721a      	strb	r2, [r3, #8]
	commonCathode = commonCathode_;			//type of seven segment common cathode or common anode
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	7e3a      	ldrb	r2, [r7, #24]
 8000d5c:	725a      	strb	r2, [r3, #9]

	position = 0;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2200      	movs	r2, #0
 8000d62:	729a      	strb	r2, [r3, #10]
	bufferIndex = 0;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	72da      	strb	r2, [r3, #11]
	symbolCodes = new char[numberDigits];
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	7a1b      	ldrb	r3, [r3, #8]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fdd2 	bl	8002918 <_Znaj>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
	buffer = new char[(2*numberDigits)+1];
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	7a1b      	ldrb	r3, [r3, #8]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	3301      	adds	r3, #1
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fdc7 	bl	8002918 <_Znaj>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	60da      	str	r2, [r3, #12]
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <_ZN12SevenSegment7messageEPKc>:

bool SevenSegment::message(const char *str)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	uint8_t strIdx = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]
	uint8_t symbolIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73bb      	strb	r3, [r7, #14]
	while(this->buffer[strIdx] != '\n')
 8000dae:	e0a3      	b.n	8000ef8 <_ZN12SevenSegment7messageEPKc+0x15c>
	{
		if(str[strIdx] >= '0' && str[strIdx] <= '9')
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b2f      	cmp	r3, #47	@ 0x2f
 8000dba:	d913      	bls.n	8000de4 <_ZN12SevenSegment7messageEPKc+0x48>
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b39      	cmp	r3, #57	@ 0x39
 8000dc6:	d80d      	bhi.n	8000de4 <_ZN12SevenSegment7messageEPKc+0x48>
			this->symbolCodes[symbolIdx] = digitCodeMap[str[strIdx] - '0'];
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6919      	ldr	r1, [r3, #16]
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	440b      	add	r3, r1
 8000ddc:	494e      	ldr	r1, [pc, #312]	@ (8000f18 <_ZN12SevenSegment7messageEPKc+0x17c>)
 8000dde:	5c8a      	ldrb	r2, [r1, r2]
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e083      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
		else if(str[strIdx] >= 'A' && str[strIdx] <= 'Z')
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b40      	cmp	r3, #64	@ 0x40
 8000dee:	d913      	bls.n	8000e18 <_ZN12SevenSegment7messageEPKc+0x7c>
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b5a      	cmp	r3, #90	@ 0x5a
 8000dfa:	d80d      	bhi.n	8000e18 <_ZN12SevenSegment7messageEPKc+0x7c>
			this->symbolCodes[symbolIdx] = digitCodeMap[str[strIdx] - 'A' + 10];
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f1a3 0237 	sub.w	r2, r3, #55	@ 0x37
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6919      	ldr	r1, [r3, #16]
 8000e0c:	7bbb      	ldrb	r3, [r7, #14]
 8000e0e:	440b      	add	r3, r1
 8000e10:	4941      	ldr	r1, [pc, #260]	@ (8000f18 <_ZN12SevenSegment7messageEPKc+0x17c>)
 8000e12:	5c8a      	ldrb	r2, [r1, r2]
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e069      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
		else if(str[strIdx] >= 'a' && str[strIdx] <= 'z')
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b60      	cmp	r3, #96	@ 0x60
 8000e22:	d913      	bls.n	8000e4c <_ZN12SevenSegment7messageEPKc+0xb0>
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e2e:	d80d      	bhi.n	8000e4c <_ZN12SevenSegment7messageEPKc+0xb0>
			this->symbolCodes[symbolIdx] = digitCodeMap[str[strIdx] - 'a' + 10];
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f1a3 0257 	sub.w	r2, r3, #87	@ 0x57
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6919      	ldr	r1, [r3, #16]
 8000e40:	7bbb      	ldrb	r3, [r7, #14]
 8000e42:	440b      	add	r3, r1
 8000e44:	4934      	ldr	r1, [pc, #208]	@ (8000f18 <_ZN12SevenSegment7messageEPKc+0x17c>)
 8000e46:	5c8a      	ldrb	r2, [r1, r2]
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e04f      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
		else if (str[strIdx] == ' ')
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	d106      	bne.n	8000e66 <_ZN12SevenSegment7messageEPKc+0xca>
			this->symbolCodes[symbolIdx] = digitCodeMap[BLANK_IDX];
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	4413      	add	r3, r2
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e042      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
		else if (str[strIdx] == '.')
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e70:	d11c      	bne.n	8000eac <_ZN12SevenSegment7messageEPKc+0x110>
			if(strIdx == 0)
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d106      	bne.n	8000e86 <_ZN12SevenSegment7messageEPKc+0xea>
				this->symbolCodes[symbolIdx] = digitCodeMap[DOT_IDX];
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	4413      	add	r3, r2
 8000e80:	2280      	movs	r2, #128	@ 0x80
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e032      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
			else
			{
				this->symbolCodes[symbolIdx - 1] = digitCodeMap[DOT_IDX] | this->symbolCodes[symbolIdx - 1];
 8000e86:	2080      	movs	r0, #128	@ 0x80
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6919      	ldr	r1, [r3, #16]
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	440b      	add	r3, r1
 8000e9e:	4302      	orrs	r2, r0
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
				--symbolIdx;
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	73bb      	strb	r3, [r7, #14]
 8000eaa:	e01f      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
			}

		else if (str[strIdx] == '*')
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eb6:	d106      	bne.n	8000ec6 <_ZN12SevenSegment7messageEPKc+0x12a>
			this->symbolCodes[symbolIdx] = digitCodeMap[ASTERISK_IDX];
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	2263      	movs	r2, #99	@ 0x63
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e012      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
		else if (str[strIdx] == '_')
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b5f      	cmp	r3, #95	@ 0x5f
 8000ed0:	d106      	bne.n	8000ee0 <_ZN12SevenSegment7messageEPKc+0x144>
			this->symbolCodes[symbolIdx] = digitCodeMap[UNDERSCORE_IDX];
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	4413      	add	r3, r2
 8000eda:	2208      	movs	r2, #8
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	e005      	b.n	8000eec <_ZN12SevenSegment7messageEPKc+0x150>
		else  // Every unknown character is shown as a dash
			this->symbolCodes[symbolIdx] = digitCodeMap[DASH_IDX];
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2240      	movs	r2, #64	@ 0x40
 8000eea:	701a      	strb	r2, [r3, #0]


		++strIdx; ++symbolIdx;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	73bb      	strb	r3, [r7, #14]
	while(this->buffer[strIdx] != '\n')
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	f47f af54 	bne.w	8000db0 <_ZN12SevenSegment7messageEPKc+0x14>

	}

	return true;
 8000f08:	2301      	movs	r3, #1
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	0800337c 	.word	0x0800337c

08000f1c <_ZNV12SevenSegment14refreshDisplayEv>:
		this->symbolCodes[idx] = digitCodeMap[DASH_IDX];
}


void SevenSegment::refreshDisplay(void) volatile
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	this->segmentOFF();
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f8a0 	bl	800106a <_ZNV12SevenSegment10segmentOFFEv>
	this->position++;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7a9b      	ldrb	r3, [r3, #10]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	729a      	strb	r2, [r3, #10]
	if(this->position == this->numberDigits)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7a9b      	ldrb	r3, [r3, #10]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a1b      	ldrb	r3, [r3, #8]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	429a      	cmp	r2, r3
 8000f46:	bf0c      	ite	eq
 8000f48:	2301      	moveq	r3, #1
 8000f4a:	2300      	movne	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <_ZNV12SevenSegment14refreshDisplayEv+0x3c>
		this->position = 0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	729a      	strb	r2, [r3, #10]

	//Set segment outputs
	this->loadSymbol();
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f807 	bl	8000f6c <_ZNV12SevenSegment10loadSymbolEv>
	this->segmentON();
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f84b 	bl	8000ffa <_ZNV12SevenSegment9segmentONEv>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZNV12SevenSegment10loadSymbolEv>:

void SevenSegment::loadSymbol(void) volatile
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	char symbol = *(this->symbolCodes + this->position);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	7a92      	ldrb	r2, [r2, #10]
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < 8; ++i)
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]
 8000f88:	e02f      	b.n	8000fea <_ZNV12SevenSegment10loadSymbolEv+0x7e>
	{
		if((symbol & 0b00000001) == 0b00000001)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d012      	beq.n	8000fba <_ZNV12SevenSegment10loadSymbolEv+0x4e>
				HAL_GPIO_WritePin(this->segmentPin[i].port, this->segmentPin[i].pin, GPIO_PIN_SET);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f000 fc32 	bl	800181c <HAL_GPIO_WritePin>
 8000fb8:	e011      	b.n	8000fde <_ZNV12SevenSegment10loadSymbolEv+0x72>
			else
				HAL_GPIO_WritePin(this->segmentPin[i].port, this->segmentPin[i].pin, GPIO_PIN_RESET);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f000 fc1f 	bl	800181c <HAL_GPIO_WritePin>
		symbol >>= 1;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 8; ++i)
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	d9cc      	bls.n	8000f8a <_ZNV12SevenSegment10loadSymbolEv+0x1e>
	}

}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_ZNV12SevenSegment9segmentONEv>:

void SevenSegment::segmentON(void) volatile
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
	uint8_t idx = this->numberDigits - 1 - this->position;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7a1b      	ldrb	r3, [r3, #8]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7a9b      	ldrb	r3, [r3, #10]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3b01      	subs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
	if(this->commonCathode)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7a5b      	ldrb	r3, [r3, #9]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d010      	beq.n	8001042 <_ZNV12SevenSegment9segmentONEv+0x48>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	889b      	ldrh	r3, [r3, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	f000 fbee 	bl	800181c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_RESET);
}
 8001040:	e00f      	b.n	8001062 <_ZNV12SevenSegment9segmentONEv+0x68>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_RESET);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4413      	add	r3, r2
 800104c:	6818      	ldr	r0, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4413      	add	r3, r2
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	f000 fbdd 	bl	800181c <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_ZNV12SevenSegment10segmentOFFEv>:

void SevenSegment::segmentOFF(void) volatile
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	uint8_t idx = this->numberDigits - 1 - this->position;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7a9b      	ldrb	r3, [r3, #10]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3b01      	subs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
	if(this->commonCathode)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a5b      	ldrb	r3, [r3, #9]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d010      	beq.n	80010b2 <_ZNV12SevenSegment10segmentOFFEv+0x48>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_RESET);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4413      	add	r3, r2
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	f000 fbb6 	bl	800181c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_SET);
}
 80010b0:	e00f      	b.n	80010d2 <_ZNV12SevenSegment10segmentOFFEv+0x68>
		HAL_GPIO_WritePin(this->digitsPin[idx].port, this->digitsPin[idx].pin, GPIO_PIN_SET);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4413      	add	r3, r2
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	f000 fba5 	bl	800181c <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <_ZN12SevenSegmentlsEPKc>:

void SevenSegment::operator<<(const char *str)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	char *member = new char[(2 * this->numberDigits) + 1];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7a1b      	ldrb	r3, [r3, #8]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	3301      	adds	r3, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fc12 	bl	8002918 <_Znaj>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
	uint8_t size = sprintf(member, "%s", str);
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4943      	ldr	r1, [pc, #268]	@ (8001208 <_ZN12SevenSegmentlsEPKc+0x12c>)
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f001 fcef 	bl	8002ae0 <siprintf>
 8001102:	4603      	mov	r3, r0
 8001104:	72fb      	strb	r3, [r7, #11]

	//Get number of points
	uint8_t pointNumber = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	75fb      	strb	r3, [r7, #23]
	uint8_t symbolNumber = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	75bb      	strb	r3, [r7, #22]
	uint8_t idx = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	757b      	strb	r3, [r7, #21]
	for(uint8_t i = 0; i < size; ++i)
 8001112:	2300      	movs	r3, #0
 8001114:	753b      	strb	r3, [r7, #20]
 8001116:	e00f      	b.n	8001138 <_ZN12SevenSegmentlsEPKc+0x5c>
	{
		if(member[i] == '.')
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b2e      	cmp	r3, #46	@ 0x2e
 8001122:	d103      	bne.n	800112c <_ZN12SevenSegmentlsEPKc+0x50>
			++pointNumber;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	3301      	adds	r3, #1
 8001128:	75fb      	strb	r3, [r7, #23]
 800112a:	e002      	b.n	8001132 <_ZN12SevenSegmentlsEPKc+0x56>
		else
			++symbolNumber;
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	3301      	adds	r3, #1
 8001130:	75bb      	strb	r3, [r7, #22]
	for(uint8_t i = 0; i < size; ++i)
 8001132:	7d3b      	ldrb	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	753b      	strb	r3, [r7, #20]
 8001138:	7d3a      	ldrb	r2, [r7, #20]
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3eb      	bcc.n	8001118 <_ZN12SevenSegmentlsEPKc+0x3c>
	}
	//Size check
	if(symbolNumber > this->numberDigits)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	7dba      	ldrb	r2, [r7, #22]
 8001146:	429a      	cmp	r2, r3
 8001148:	d911      	bls.n	800116e <_ZN12SevenSegmentlsEPKc+0x92>
	{
		for(uint8_t i = 0; i < this->numberDigits; ++i)
 800114a:	2300      	movs	r3, #0
 800114c:	74fb      	strb	r3, [r7, #19]
 800114e:	e008      	b.n	8001162 <_ZN12SevenSegmentlsEPKc+0x86>
			this->buffer[i] = '-';
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	7cfb      	ldrb	r3, [r7, #19]
 8001156:	4413      	add	r3, r2
 8001158:	222d      	movs	r2, #45	@ 0x2d
 800115a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < this->numberDigits; ++i)
 800115c:	7cfb      	ldrb	r3, [r7, #19]
 800115e:	3301      	adds	r3, #1
 8001160:	74fb      	strb	r3, [r7, #19]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	7cfa      	ldrb	r2, [r7, #19]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3f1      	bcc.n	8001150 <_ZN12SevenSegmentlsEPKc+0x74>
 800116c:	e036      	b.n	80011dc <_ZN12SevenSegmentlsEPKc+0x100>
	}
	else if(symbolNumber < this->numberDigits)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7a1b      	ldrb	r3, [r3, #8]
 8001172:	7dba      	ldrb	r2, [r7, #22]
 8001174:	429a      	cmp	r2, r3
 8001176:	d228      	bcs.n	80011ca <_ZN12SevenSegmentlsEPKc+0xee>
	{
		for(; idx < numberDigits - symbolNumber; ++idx)
 8001178:	e008      	b.n	800118c <_ZN12SevenSegmentlsEPKc+0xb0>
			this->buffer[idx] = ' ';
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	7d7b      	ldrb	r3, [r7, #21]
 8001180:	4413      	add	r3, r2
 8001182:	2220      	movs	r2, #32
 8001184:	701a      	strb	r2, [r3, #0]
		for(; idx < numberDigits - symbolNumber; ++idx)
 8001186:	7d7b      	ldrb	r3, [r7, #21]
 8001188:	3301      	adds	r3, #1
 800118a:	757b      	strb	r3, [r7, #21]
 800118c:	7d7a      	ldrb	r2, [r7, #21]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7a1b      	ldrb	r3, [r3, #8]
 8001192:	4619      	mov	r1, r3
 8001194:	7dbb      	ldrb	r3, [r7, #22]
 8001196:	1acb      	subs	r3, r1, r3
 8001198:	429a      	cmp	r2, r3
 800119a:	dbee      	blt.n	800117a <_ZN12SevenSegmentlsEPKc+0x9e>

		uint8_t idxStr = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	74bb      	strb	r3, [r7, #18]
		for(; idxStr < size; ++idxStr)
 80011a0:	e00e      	b.n	80011c0 <_ZN12SevenSegmentlsEPKc+0xe4>
		{
			this->buffer[idx] = member[idxStr];
 80011a2:	7cbb      	ldrb	r3, [r7, #18]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	441a      	add	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	7d7b      	ldrb	r3, [r7, #21]
 80011ae:	440b      	add	r3, r1
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	701a      	strb	r2, [r3, #0]
			++idx;
 80011b4:	7d7b      	ldrb	r3, [r7, #21]
 80011b6:	3301      	adds	r3, #1
 80011b8:	757b      	strb	r3, [r7, #21]
		for(; idxStr < size; ++idxStr)
 80011ba:	7cbb      	ldrb	r3, [r7, #18]
 80011bc:	3301      	adds	r3, #1
 80011be:	74bb      	strb	r3, [r7, #18]
 80011c0:	7cba      	ldrb	r2, [r7, #18]
 80011c2:	7afb      	ldrb	r3, [r7, #11]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3ec      	bcc.n	80011a2 <_ZN12SevenSegmentlsEPKc+0xc6>
 80011c8:	e008      	b.n	80011dc <_ZN12SevenSegmentlsEPKc+0x100>
		}
	}
	else
	{
		sprintf(this->buffer, "%s", member);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	490d      	ldr	r1, [pc, #52]	@ (8001208 <_ZN12SevenSegmentlsEPKc+0x12c>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fc84 	bl	8002ae0 <siprintf>
		idx = size;
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	757b      	strb	r3, [r7, #21]
	}

	this->buffer[idx] = '\n';
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	7d7b      	ldrb	r3, [r7, #21]
 80011e2:	4413      	add	r3, r2
 80011e4:	220a      	movs	r2, #10
 80011e6:	701a      	strb	r2, [r3, #0]
	delete[] member;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <_ZN12SevenSegmentlsEPKc+0x118>
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f001 fb90 	bl	8002914 <_ZdaPv>

	this->message(this->buffer);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fdce 	bl	8000d9c <_ZN12SevenSegment7messageEPKc>

}
 8001200:	bf00      	nop
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08003368 	.word	0x08003368

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <HAL_Init+0x40>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800121a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_Init+0x40>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a07      	ldr	r2, [pc, #28]	@ (800124c <HAL_Init+0x40>)
 800122e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f92b 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123a:	200f      	movs	r0, #15
 800123c:	f000 f808 	bl	8001250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001240:	f7ff fc1c 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023c00 	.word	0x40023c00

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_InitTick+0x54>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <HAL_InitTick+0x58>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f943 	bl	80014fa <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e00e      	b.n	800129c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0f      	cmp	r3, #15
 8001282:	d80a      	bhi.n	800129a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001284:	2200      	movs	r2, #0
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800128c:	f000 f90b 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001290:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <HAL_InitTick+0x5c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_IncTick+0x20>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_IncTick+0x24>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	4a04      	ldr	r2, [pc, #16]	@ (80012d4 <HAL_IncTick+0x24>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000008 	.word	0x20000008
 80012d4:	20000198 	.word	0x20000198

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetTick+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000198 	.word	0x20000198

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	@ (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	@ (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	@ (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	@ (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff3e 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff8e 	bl	80013e4 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5d 	bl	8001390 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff31 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e159      	b.n	80017e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8148 	bne.w	80017de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a2 	beq.w	80017de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b57      	ldr	r3, [pc, #348]	@ (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a56      	ldr	r2, [pc, #344]	@ (80017fc <HAL_GPIO_Init+0x2e8>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b54      	ldr	r3, [pc, #336]	@ (80017fc <HAL_GPIO_Init+0x2e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b6:	4a52      	ldr	r2, [pc, #328]	@ (8001800 <HAL_GPIO_Init+0x2ec>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <HAL_GPIO_Init+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x202>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a48      	ldr	r2, [pc, #288]	@ (8001808 <HAL_GPIO_Init+0x2f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x1fe>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a47      	ldr	r2, [pc, #284]	@ (800180c <HAL_GPIO_Init+0x2f8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x1fa>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a46      	ldr	r2, [pc, #280]	@ (8001810 <HAL_GPIO_Init+0x2fc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x1f6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a45      	ldr	r2, [pc, #276]	@ (8001814 <HAL_GPIO_Init+0x300>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x1f2>
 8001702:	2304      	movs	r3, #4
 8001704:	e008      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001706:	2307      	movs	r3, #7
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170a:	2303      	movs	r3, #3
 800170c:	e004      	b.n	8001718 <HAL_GPIO_Init+0x204>
 800170e:	2302      	movs	r3, #2
 8001710:	e002      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_GPIO_Init+0x204>
 8001716:	2300      	movs	r3, #0
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f002 0203 	and.w	r2, r2, #3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4093      	lsls	r3, r2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001728:	4935      	ldr	r1, [pc, #212]	@ (8001800 <HAL_GPIO_Init+0x2ec>)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b38      	ldr	r3, [pc, #224]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800175a:	4a2f      	ldr	r2, [pc, #188]	@ (8001818 <HAL_GPIO_Init+0x304>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001760:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001784:	4a24      	ldr	r2, [pc, #144]	@ (8001818 <HAL_GPIO_Init+0x304>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800178a:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_GPIO_Init+0x304>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	4b18      	ldr	r3, [pc, #96]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <HAL_GPIO_Init+0x304>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	f67f aea2 	bls.w	8001530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3724      	adds	r7, #36	@ 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e267      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d075      	beq.n	800195a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800186e:	4b88      	ldr	r3, [pc, #544]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b04      	cmp	r3, #4
 8001878:	d00c      	beq.n	8001894 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187a:	4b85      	ldr	r3, [pc, #532]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001882:	2b08      	cmp	r3, #8
 8001884:	d112      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001886:	4b82      	ldr	r3, [pc, #520]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001892:	d10b      	bne.n	80018ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001894:	4b7e      	ldr	r3, [pc, #504]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d05b      	beq.n	8001958 <HAL_RCC_OscConfig+0x108>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d157      	bne.n	8001958 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e242      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b4:	d106      	bne.n	80018c4 <HAL_RCC_OscConfig+0x74>
 80018b6:	4b76      	ldr	r3, [pc, #472]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a75      	ldr	r2, [pc, #468]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x98>
 80018ce:	4b70      	ldr	r3, [pc, #448]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6d      	ldr	r3, [pc, #436]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6c      	ldr	r2, [pc, #432]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xb0>
 80018e8:	4b69      	ldr	r3, [pc, #420]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a68      	ldr	r2, [pc, #416]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a65      	ldr	r2, [pc, #404]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fce6 	bl	80012d8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fce2 	bl	80012d8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e207      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b5b      	ldr	r3, [pc, #364]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xc0>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fcd2 	bl	80012d8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001938:	f7ff fcce 	bl	80012d8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	@ 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1f3      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b51      	ldr	r3, [pc, #324]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0xe8>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001966:	4b4a      	ldr	r3, [pc, #296]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197e:	4b44      	ldr	r3, [pc, #272]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b41      	ldr	r3, [pc, #260]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1c7      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4937      	ldr	r1, [pc, #220]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e03a      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <HAL_RCC_OscConfig+0x244>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fc87 	bl	80012d8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ce:	f7ff fc83 	bl	80012d8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1a8      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4925      	ldr	r1, [pc, #148]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <HAL_RCC_OscConfig+0x244>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff fc66 	bl	80012d8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff fc62 	bl	80012d8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e187      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d036      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d016      	beq.n	8001a70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_RCC_OscConfig+0x248>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff fc46 	bl	80012d8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fc42 	bl	80012d8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e167      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_RCC_OscConfig+0x240>)
 8001a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x200>
 8001a6e:	e01b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_RCC_OscConfig+0x248>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fc2f 	bl	80012d8 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	e00e      	b.n	8001a9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fc2b 	bl	80012d8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d907      	bls.n	8001a9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e150      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
 8001a90:	40023800 	.word	0x40023800
 8001a94:	42470000 	.word	0x42470000
 8001a98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	4b88      	ldr	r3, [pc, #544]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ea      	bne.n	8001a7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8097 	beq.w	8001be4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b81      	ldr	r3, [pc, #516]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b7d      	ldr	r3, [pc, #500]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b77      	ldr	r3, [pc, #476]	@ (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af2:	4b74      	ldr	r3, [pc, #464]	@ (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a73      	ldr	r2, [pc, #460]	@ (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fbeb 	bl	80012d8 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7ff fbe7 	bl	80012d8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e10c      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc4 <HAL_RCC_OscConfig+0x474>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2ea>
 8001b2c:	4b64      	ldr	r3, [pc, #400]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a63      	ldr	r2, [pc, #396]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b38:	e01c      	b.n	8001b74 <HAL_RCC_OscConfig+0x324>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x30c>
 8001b42:	4b5f      	ldr	r3, [pc, #380]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	4a5e      	ldr	r2, [pc, #376]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	4a5b      	ldr	r2, [pc, #364]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0x324>
 8001b5c:	4b58      	ldr	r3, [pc, #352]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b60:	4a57      	ldr	r2, [pc, #348]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b68:	4b55      	ldr	r3, [pc, #340]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6c:	4a54      	ldr	r2, [pc, #336]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f023 0304 	bic.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d015      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fbac 	bl	80012d8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff fba8 	bl	80012d8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0cb      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	4b49      	ldr	r3, [pc, #292]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0ee      	beq.n	8001b84 <HAL_RCC_OscConfig+0x334>
 8001ba6:	e014      	b.n	8001bd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fb96 	bl	80012d8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7ff fb92 	bl	80012d8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0b5      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd8:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	4a38      	ldr	r2, [pc, #224]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a1 	beq.w	8001d30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bee:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d05c      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d141      	bne.n	8001c86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb66 	bl	80012d8 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff fb62 	bl	80012d8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e087      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	491b      	ldr	r1, [pc, #108]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fb3b 	bl	80012d8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fb37 	bl	80012d8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e05c      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x416>
 8001c84:	e054      	b.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_RCC_OscConfig+0x478>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fb24 	bl	80012d8 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff fb20 	bl	80012d8 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e045      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x444>
 8001cb2:	e03d      	b.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e038      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x4ec>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d028      	beq.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d121      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d11a      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d111      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	3b01      	subs	r3, #1
 8001d16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cc      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b68      	ldr	r3, [pc, #416]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d90c      	bls.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b65      	ldr	r3, [pc, #404]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0b8      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d94:	4b59      	ldr	r3, [pc, #356]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4a58      	ldr	r2, [pc, #352]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dac:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001db6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db8:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	494d      	ldr	r1, [pc, #308]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d044      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b47      	ldr	r3, [pc, #284]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d119      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e07f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e067      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b37      	ldr	r3, [pc, #220]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4934      	ldr	r1, [pc, #208]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fa52 	bl	80012d8 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fa4e 	bl	80012d8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e04f      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d20c      	bcs.n	8001e88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e032      	b.n	8001eee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e94:	4b19      	ldr	r3, [pc, #100]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4916      	ldr	r1, [pc, #88]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	490e      	ldr	r1, [pc, #56]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec6:	f000 f821 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	490a      	ldr	r1, [pc, #40]	@ (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	5ccb      	ldrb	r3, [r1, r3]
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f9b2 	bl	8001250 <HAL_InitTick>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00
 8001efc:	40023800 	.word	0x40023800
 8001f00:	0800336c 	.word	0x0800336c
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f10:	b090      	sub	sp, #64	@ 0x40
 8001f12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f24:	4b59      	ldr	r3, [pc, #356]	@ (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d00d      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x40>
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	f200 80a1 	bhi.w	8002078 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f3e:	e09b      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b53      	ldr	r3, [pc, #332]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f44:	e09b      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f46:	4b53      	ldr	r3, [pc, #332]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f4a:	e098      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f56:	4b4d      	ldr	r3, [pc, #308]	@ (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b4a      	ldr	r3, [pc, #296]	@ (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	2200      	movs	r2, #0
 8001f6a:	623b      	str	r3, [r7, #32]
 8001f6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f74:	2100      	movs	r1, #0
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f78:	fb03 f201 	mul.w	r2, r3, r1
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	fb00 f303 	mul.w	r3, r0, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	4a43      	ldr	r2, [pc, #268]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f86:	fba0 1202 	umull	r1, r2, r0, r2
 8001f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f92:	4413      	add	r3, r2
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	61fa      	str	r2, [r7, #28]
 8001f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001fa6:	f7fe f96b 	bl	8000280 <__aeabi_uldivmod>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4613      	mov	r3, r2
 8001fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fb2:	e053      	b.n	800205c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb4:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	2200      	movs	r2, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	617a      	str	r2, [r7, #20]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001fc6:	f04f 0b00 	mov.w	fp, #0
 8001fca:	4652      	mov	r2, sl
 8001fcc:	465b      	mov	r3, fp
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	0159      	lsls	r1, r3, #5
 8001fd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fdc:	0150      	lsls	r0, r2, #5
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ebb2 080a 	subs.w	r8, r2, sl
 8001fe6:	eb63 090b 	sbc.w	r9, r3, fp
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ff6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ffa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ffe:	ebb2 0408 	subs.w	r4, r2, r8
 8002002:	eb63 0509 	sbc.w	r5, r3, r9
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	00eb      	lsls	r3, r5, #3
 8002010:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002014:	00e2      	lsls	r2, r4, #3
 8002016:	4614      	mov	r4, r2
 8002018:	461d      	mov	r5, r3
 800201a:	eb14 030a 	adds.w	r3, r4, sl
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	eb45 030b 	adc.w	r3, r5, fp
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002032:	4629      	mov	r1, r5
 8002034:	028b      	lsls	r3, r1, #10
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800203c:	4621      	mov	r1, r4
 800203e:	028a      	lsls	r2, r1, #10
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002046:	2200      	movs	r2, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	60fa      	str	r2, [r7, #12]
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe f916 	bl	8000280 <__aeabi_uldivmod>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4613      	mov	r3, r2
 800205a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800205c:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800206c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800206e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x184>)
 800207a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002080:	4618      	mov	r0, r3
 8002082:	3740      	adds	r7, #64	@ 0x40
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	00f42400 	.word	0x00f42400
 8002094:	017d7840 	.word	0x017d7840

08002098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e041      	b.n	800212e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fd04 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3304      	adds	r3, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f000 fa7a 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d001      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e044      	b.n	80021da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d018      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217a:	d013      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x6c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1a      	ldr	r2, [pc, #104]	@ (80021ec <HAL_TIM_Base_Start_IT+0xb4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d009      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x6c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a17      	ldr	r2, [pc, #92]	@ (80021f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x6c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a16      	ldr	r2, [pc, #88]	@ (80021f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d111      	bne.n	80021c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d010      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c6:	e007      	b.n	80021d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40010000 	.word	0x40010000
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800
 80021f4:	40000c00 	.word	0x40000c00
 80021f8:	40014000 	.word	0x40014000

080021fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d020      	beq.n	8002260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0202 	mvn.w	r2, #2
 8002230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f9a3 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 800224c:	e005      	b.n	800225a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f995 	bl	800257e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f9a6 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d01b      	beq.n	80022ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0204 	mvn.w	r2, #4
 800227c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f97d 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 8002298:	e005      	b.n	80022a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f96f 	bl	800257e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f980 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d020      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f957 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f949 	bl	800257e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f95a 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d020      	beq.n	8002344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01b      	beq.n	8002344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0210 	mvn.w	r2, #16
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2208      	movs	r2, #8
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f931 	bl	8002592 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f923 	bl	800257e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f934 	bl	80025a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d007      	beq.n	8002368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0201 	mvn.w	r2, #1
 8002360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f901 	bl	800256a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00c      	beq.n	800238c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002378:	2b00      	cmp	r3, #0
 800237a:	d007      	beq.n	800238c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 faba 	bl	8002900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00c      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f905 	bl	80025ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0220 	mvn.w	r2, #32
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa8c 	bl	80028ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_TIM_ConfigClockSource+0x1c>
 80023f4:	2302      	movs	r3, #2
 80023f6:	e0b4      	b.n	8002562 <HAL_TIM_ConfigClockSource+0x186>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800241e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002430:	d03e      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0xd4>
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002436:	f200 8087 	bhi.w	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800243e:	f000 8086 	beq.w	800254e <HAL_TIM_ConfigClockSource+0x172>
 8002442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002446:	d87f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b70      	cmp	r3, #112	@ 0x70
 800244a:	d01a      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0xa6>
 800244c:	2b70      	cmp	r3, #112	@ 0x70
 800244e:	d87b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b60      	cmp	r3, #96	@ 0x60
 8002452:	d050      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x11a>
 8002454:	2b60      	cmp	r3, #96	@ 0x60
 8002456:	d877      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b50      	cmp	r3, #80	@ 0x50
 800245a:	d03c      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xfa>
 800245c:	2b50      	cmp	r3, #80	@ 0x50
 800245e:	d873      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d058      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x13a>
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d86f      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b30      	cmp	r3, #48	@ 0x30
 800246a:	d064      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b30      	cmp	r3, #48	@ 0x30
 800246e:	d86b      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d060      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b20      	cmp	r3, #32
 8002476:	d867      	bhi.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d05c      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	2b10      	cmp	r3, #16
 800247e:	d05a      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x15a>
 8002480:	e062      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002492:	f000 f99d 	bl	80027d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	609a      	str	r2, [r3, #8]
      break;
 80024ae:	e04f      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024c0:	f000 f986 	bl	80027d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024d2:	609a      	str	r2, [r3, #8]
      break;
 80024d4:	e03c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	461a      	mov	r2, r3
 80024e4:	f000 f8fa 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2150      	movs	r1, #80	@ 0x50
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f953 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80024f4:	e02c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	461a      	mov	r2, r3
 8002504:	f000 f919 	bl	800273a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2160      	movs	r1, #96	@ 0x60
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f943 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002514:	e01c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	f000 f8da 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2140      	movs	r1, #64	@ 0x40
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f933 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002534:	e00c      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f000 f92a 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 8002546:	e003      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
      break;
 800254c:	e000      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800254e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a37      	ldr	r2, [pc, #220]	@ (80026c0 <TIM_Base_SetConfig+0xf0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00f      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ee:	d00b      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a34      	ldr	r2, [pc, #208]	@ (80026c4 <TIM_Base_SetConfig+0xf4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a33      	ldr	r2, [pc, #204]	@ (80026c8 <TIM_Base_SetConfig+0xf8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_Base_SetConfig+0x38>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a32      	ldr	r2, [pc, #200]	@ (80026cc <TIM_Base_SetConfig+0xfc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d108      	bne.n	800261a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a28      	ldr	r2, [pc, #160]	@ (80026c0 <TIM_Base_SetConfig+0xf0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01b      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d017      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a25      	ldr	r2, [pc, #148]	@ (80026c4 <TIM_Base_SetConfig+0xf4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a24      	ldr	r2, [pc, #144]	@ (80026c8 <TIM_Base_SetConfig+0xf8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00f      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a23      	ldr	r2, [pc, #140]	@ (80026cc <TIM_Base_SetConfig+0xfc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00b      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <TIM_Base_SetConfig+0x100>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a21      	ldr	r2, [pc, #132]	@ (80026d4 <TIM_Base_SetConfig+0x104>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d003      	beq.n	800265a <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a20      	ldr	r2, [pc, #128]	@ (80026d8 <TIM_Base_SetConfig+0x108>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d108      	bne.n	800266c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a0c      	ldr	r2, [pc, #48]	@ (80026c0 <TIM_Base_SetConfig+0xf0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d103      	bne.n	800269a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f043 0204 	orr.w	r2, r3, #4
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	601a      	str	r2, [r3, #0]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800
 80026cc:	40000c00 	.word	0x40000c00
 80026d0:	40014000 	.word	0x40014000
 80026d4:	40014400 	.word	0x40014400
 80026d8:	40014800 	.word	0x40014800

080026dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 030a 	bic.w	r3, r3, #10
 8002718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f023 0210 	bic.w	r2, r3, #16
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	031b      	lsls	r3, r3, #12
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002776:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f043 0307 	orr.w	r3, r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	021a      	lsls	r2, r3, #8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002824:	2302      	movs	r3, #2
 8002826:	e050      	b.n	80028ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800284e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d018      	beq.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002874:	d013      	beq.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a18      	ldr	r2, [pc, #96]	@ (80028dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a16      	ldr	r2, [pc, #88]	@ (80028e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a15      	ldr	r2, [pc, #84]	@ (80028e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10c      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40014000 	.word	0x40014000

080028ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_ZdaPv>:
 8002914:	f000 b802 	b.w	800291c <_ZdlPv>

08002918 <_Znaj>:
 8002918:	f000 b802 	b.w	8002920 <_Znwj>

0800291c <_ZdlPv>:
 800291c:	f000 b82a 	b.w	8002974 <free>

08002920 <_Znwj>:
 8002920:	2801      	cmp	r0, #1
 8002922:	bf38      	it	cc
 8002924:	2001      	movcc	r0, #1
 8002926:	b510      	push	{r4, lr}
 8002928:	4604      	mov	r4, r0
 800292a:	4620      	mov	r0, r4
 800292c:	f000 f81a 	bl	8002964 <malloc>
 8002930:	b100      	cbz	r0, 8002934 <_Znwj+0x14>
 8002932:	bd10      	pop	{r4, pc}
 8002934:	f000 f806 	bl	8002944 <_ZSt15get_new_handlerv>
 8002938:	b908      	cbnz	r0, 800293e <_Znwj+0x1e>
 800293a:	f000 f80b 	bl	8002954 <abort>
 800293e:	4780      	blx	r0
 8002940:	e7f3      	b.n	800292a <_Znwj+0xa>
	...

08002944 <_ZSt15get_new_handlerv>:
 8002944:	4b02      	ldr	r3, [pc, #8]	@ (8002950 <_ZSt15get_new_handlerv+0xc>)
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	f3bf 8f5b 	dmb	ish
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2000019c 	.word	0x2000019c

08002954 <abort>:
 8002954:	b508      	push	{r3, lr}
 8002956:	2006      	movs	r0, #6
 8002958:	f000 f914 	bl	8002b84 <raise>
 800295c:	2001      	movs	r0, #1
 800295e:	f7fe f963 	bl	8000c28 <_exit>
	...

08002964 <malloc>:
 8002964:	4b02      	ldr	r3, [pc, #8]	@ (8002970 <malloc+0xc>)
 8002966:	4601      	mov	r1, r0
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	f000 b82d 	b.w	80029c8 <_malloc_r>
 800296e:	bf00      	nop
 8002970:	2000000c 	.word	0x2000000c

08002974 <free>:
 8002974:	4b02      	ldr	r3, [pc, #8]	@ (8002980 <free+0xc>)
 8002976:	4601      	mov	r1, r0
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f000 b95b 	b.w	8002c34 <_free_r>
 800297e:	bf00      	nop
 8002980:	2000000c 	.word	0x2000000c

08002984 <sbrk_aligned>:
 8002984:	b570      	push	{r4, r5, r6, lr}
 8002986:	4e0f      	ldr	r6, [pc, #60]	@ (80029c4 <sbrk_aligned+0x40>)
 8002988:	460c      	mov	r4, r1
 800298a:	6831      	ldr	r1, [r6, #0]
 800298c:	4605      	mov	r5, r0
 800298e:	b911      	cbnz	r1, 8002996 <sbrk_aligned+0x12>
 8002990:	f000 f914 	bl	8002bbc <_sbrk_r>
 8002994:	6030      	str	r0, [r6, #0]
 8002996:	4621      	mov	r1, r4
 8002998:	4628      	mov	r0, r5
 800299a:	f000 f90f 	bl	8002bbc <_sbrk_r>
 800299e:	1c43      	adds	r3, r0, #1
 80029a0:	d103      	bne.n	80029aa <sbrk_aligned+0x26>
 80029a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80029a6:	4620      	mov	r0, r4
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	1cc4      	adds	r4, r0, #3
 80029ac:	f024 0403 	bic.w	r4, r4, #3
 80029b0:	42a0      	cmp	r0, r4
 80029b2:	d0f8      	beq.n	80029a6 <sbrk_aligned+0x22>
 80029b4:	1a21      	subs	r1, r4, r0
 80029b6:	4628      	mov	r0, r5
 80029b8:	f000 f900 	bl	8002bbc <_sbrk_r>
 80029bc:	3001      	adds	r0, #1
 80029be:	d1f2      	bne.n	80029a6 <sbrk_aligned+0x22>
 80029c0:	e7ef      	b.n	80029a2 <sbrk_aligned+0x1e>
 80029c2:	bf00      	nop
 80029c4:	200001a0 	.word	0x200001a0

080029c8 <_malloc_r>:
 80029c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029cc:	1ccd      	adds	r5, r1, #3
 80029ce:	f025 0503 	bic.w	r5, r5, #3
 80029d2:	3508      	adds	r5, #8
 80029d4:	2d0c      	cmp	r5, #12
 80029d6:	bf38      	it	cc
 80029d8:	250c      	movcc	r5, #12
 80029da:	2d00      	cmp	r5, #0
 80029dc:	4606      	mov	r6, r0
 80029de:	db01      	blt.n	80029e4 <_malloc_r+0x1c>
 80029e0:	42a9      	cmp	r1, r5
 80029e2:	d904      	bls.n	80029ee <_malloc_r+0x26>
 80029e4:	230c      	movs	r3, #12
 80029e6:	6033      	str	r3, [r6, #0]
 80029e8:	2000      	movs	r0, #0
 80029ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ac4 <_malloc_r+0xfc>
 80029f2:	f000 f869 	bl	8002ac8 <__malloc_lock>
 80029f6:	f8d8 3000 	ldr.w	r3, [r8]
 80029fa:	461c      	mov	r4, r3
 80029fc:	bb44      	cbnz	r4, 8002a50 <_malloc_r+0x88>
 80029fe:	4629      	mov	r1, r5
 8002a00:	4630      	mov	r0, r6
 8002a02:	f7ff ffbf 	bl	8002984 <sbrk_aligned>
 8002a06:	1c43      	adds	r3, r0, #1
 8002a08:	4604      	mov	r4, r0
 8002a0a:	d158      	bne.n	8002abe <_malloc_r+0xf6>
 8002a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8002a10:	4627      	mov	r7, r4
 8002a12:	2f00      	cmp	r7, #0
 8002a14:	d143      	bne.n	8002a9e <_malloc_r+0xd6>
 8002a16:	2c00      	cmp	r4, #0
 8002a18:	d04b      	beq.n	8002ab2 <_malloc_r+0xea>
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	4639      	mov	r1, r7
 8002a1e:	4630      	mov	r0, r6
 8002a20:	eb04 0903 	add.w	r9, r4, r3
 8002a24:	f000 f8ca 	bl	8002bbc <_sbrk_r>
 8002a28:	4581      	cmp	r9, r0
 8002a2a:	d142      	bne.n	8002ab2 <_malloc_r+0xea>
 8002a2c:	6821      	ldr	r1, [r4, #0]
 8002a2e:	1a6d      	subs	r5, r5, r1
 8002a30:	4629      	mov	r1, r5
 8002a32:	4630      	mov	r0, r6
 8002a34:	f7ff ffa6 	bl	8002984 <sbrk_aligned>
 8002a38:	3001      	adds	r0, #1
 8002a3a:	d03a      	beq.n	8002ab2 <_malloc_r+0xea>
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	442b      	add	r3, r5
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	f8d8 3000 	ldr.w	r3, [r8]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	bb62      	cbnz	r2, 8002aa4 <_malloc_r+0xdc>
 8002a4a:	f8c8 7000 	str.w	r7, [r8]
 8002a4e:	e00f      	b.n	8002a70 <_malloc_r+0xa8>
 8002a50:	6822      	ldr	r2, [r4, #0]
 8002a52:	1b52      	subs	r2, r2, r5
 8002a54:	d420      	bmi.n	8002a98 <_malloc_r+0xd0>
 8002a56:	2a0b      	cmp	r2, #11
 8002a58:	d917      	bls.n	8002a8a <_malloc_r+0xc2>
 8002a5a:	1961      	adds	r1, r4, r5
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	6025      	str	r5, [r4, #0]
 8002a60:	bf18      	it	ne
 8002a62:	6059      	strne	r1, [r3, #4]
 8002a64:	6863      	ldr	r3, [r4, #4]
 8002a66:	bf08      	it	eq
 8002a68:	f8c8 1000 	streq.w	r1, [r8]
 8002a6c:	5162      	str	r2, [r4, r5]
 8002a6e:	604b      	str	r3, [r1, #4]
 8002a70:	4630      	mov	r0, r6
 8002a72:	f000 f82f 	bl	8002ad4 <__malloc_unlock>
 8002a76:	f104 000b 	add.w	r0, r4, #11
 8002a7a:	1d23      	adds	r3, r4, #4
 8002a7c:	f020 0007 	bic.w	r0, r0, #7
 8002a80:	1ac2      	subs	r2, r0, r3
 8002a82:	bf1c      	itt	ne
 8002a84:	1a1b      	subne	r3, r3, r0
 8002a86:	50a3      	strne	r3, [r4, r2]
 8002a88:	e7af      	b.n	80029ea <_malloc_r+0x22>
 8002a8a:	6862      	ldr	r2, [r4, #4]
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	bf0c      	ite	eq
 8002a90:	f8c8 2000 	streq.w	r2, [r8]
 8002a94:	605a      	strne	r2, [r3, #4]
 8002a96:	e7eb      	b.n	8002a70 <_malloc_r+0xa8>
 8002a98:	4623      	mov	r3, r4
 8002a9a:	6864      	ldr	r4, [r4, #4]
 8002a9c:	e7ae      	b.n	80029fc <_malloc_r+0x34>
 8002a9e:	463c      	mov	r4, r7
 8002aa0:	687f      	ldr	r7, [r7, #4]
 8002aa2:	e7b6      	b.n	8002a12 <_malloc_r+0x4a>
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	42a3      	cmp	r3, r4
 8002aaa:	d1fb      	bne.n	8002aa4 <_malloc_r+0xdc>
 8002aac:	2300      	movs	r3, #0
 8002aae:	6053      	str	r3, [r2, #4]
 8002ab0:	e7de      	b.n	8002a70 <_malloc_r+0xa8>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	6033      	str	r3, [r6, #0]
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	f000 f80c 	bl	8002ad4 <__malloc_unlock>
 8002abc:	e794      	b.n	80029e8 <_malloc_r+0x20>
 8002abe:	6005      	str	r5, [r0, #0]
 8002ac0:	e7d6      	b.n	8002a70 <_malloc_r+0xa8>
 8002ac2:	bf00      	nop
 8002ac4:	200001a4 	.word	0x200001a4

08002ac8 <__malloc_lock>:
 8002ac8:	4801      	ldr	r0, [pc, #4]	@ (8002ad0 <__malloc_lock+0x8>)
 8002aca:	f000 b8b1 	b.w	8002c30 <__retarget_lock_acquire_recursive>
 8002ace:	bf00      	nop
 8002ad0:	200002e4 	.word	0x200002e4

08002ad4 <__malloc_unlock>:
 8002ad4:	4801      	ldr	r0, [pc, #4]	@ (8002adc <__malloc_unlock+0x8>)
 8002ad6:	f000 b8ac 	b.w	8002c32 <__retarget_lock_release_recursive>
 8002ada:	bf00      	nop
 8002adc:	200002e4 	.word	0x200002e4

08002ae0 <siprintf>:
 8002ae0:	b40e      	push	{r1, r2, r3}
 8002ae2:	b510      	push	{r4, lr}
 8002ae4:	b09d      	sub	sp, #116	@ 0x74
 8002ae6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002ae8:	9002      	str	r0, [sp, #8]
 8002aea:	9006      	str	r0, [sp, #24]
 8002aec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002af0:	480a      	ldr	r0, [pc, #40]	@ (8002b1c <siprintf+0x3c>)
 8002af2:	9107      	str	r1, [sp, #28]
 8002af4:	9104      	str	r1, [sp, #16]
 8002af6:	490a      	ldr	r1, [pc, #40]	@ (8002b20 <siprintf+0x40>)
 8002af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002afc:	9105      	str	r1, [sp, #20]
 8002afe:	2400      	movs	r4, #0
 8002b00:	a902      	add	r1, sp, #8
 8002b02:	6800      	ldr	r0, [r0, #0]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002b08:	f000 f93a 	bl	8002d80 <_svfiprintf_r>
 8002b0c:	9b02      	ldr	r3, [sp, #8]
 8002b0e:	701c      	strb	r4, [r3, #0]
 8002b10:	b01d      	add	sp, #116	@ 0x74
 8002b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b16:	b003      	add	sp, #12
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	ffff0208 	.word	0xffff0208

08002b24 <memset>:
 8002b24:	4402      	add	r2, r0
 8002b26:	4603      	mov	r3, r0
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d100      	bne.n	8002b2e <memset+0xa>
 8002b2c:	4770      	bx	lr
 8002b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b32:	e7f9      	b.n	8002b28 <memset+0x4>

08002b34 <_raise_r>:
 8002b34:	291f      	cmp	r1, #31
 8002b36:	b538      	push	{r3, r4, r5, lr}
 8002b38:	4605      	mov	r5, r0
 8002b3a:	460c      	mov	r4, r1
 8002b3c:	d904      	bls.n	8002b48 <_raise_r+0x14>
 8002b3e:	2316      	movs	r3, #22
 8002b40:	6003      	str	r3, [r0, #0]
 8002b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b46:	bd38      	pop	{r3, r4, r5, pc}
 8002b48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002b4a:	b112      	cbz	r2, 8002b52 <_raise_r+0x1e>
 8002b4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b50:	b94b      	cbnz	r3, 8002b66 <_raise_r+0x32>
 8002b52:	4628      	mov	r0, r5
 8002b54:	f000 f830 	bl	8002bb8 <_getpid_r>
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b62:	f000 b817 	b.w	8002b94 <_kill_r>
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d00a      	beq.n	8002b80 <_raise_r+0x4c>
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	d103      	bne.n	8002b76 <_raise_r+0x42>
 8002b6e:	2316      	movs	r3, #22
 8002b70:	6003      	str	r3, [r0, #0]
 8002b72:	2001      	movs	r0, #1
 8002b74:	e7e7      	b.n	8002b46 <_raise_r+0x12>
 8002b76:	2100      	movs	r1, #0
 8002b78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	4798      	blx	r3
 8002b80:	2000      	movs	r0, #0
 8002b82:	e7e0      	b.n	8002b46 <_raise_r+0x12>

08002b84 <raise>:
 8002b84:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <raise+0xc>)
 8002b86:	4601      	mov	r1, r0
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	f7ff bfd3 	b.w	8002b34 <_raise_r>
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <_kill_r>:
 8002b94:	b538      	push	{r3, r4, r5, lr}
 8002b96:	4d07      	ldr	r5, [pc, #28]	@ (8002bb4 <_kill_r+0x20>)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	f7fe f831 	bl	8000c08 <_kill>
 8002ba6:	1c43      	adds	r3, r0, #1
 8002ba8:	d102      	bne.n	8002bb0 <_kill_r+0x1c>
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	b103      	cbz	r3, 8002bb0 <_kill_r+0x1c>
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002e0 	.word	0x200002e0

08002bb8 <_getpid_r>:
 8002bb8:	f7fe b81e 	b.w	8000bf8 <_getpid>

08002bbc <_sbrk_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4d06      	ldr	r5, [pc, #24]	@ (8002bd8 <_sbrk_r+0x1c>)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	f7fe f83a 	bl	8000c40 <_sbrk>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d102      	bne.n	8002bd6 <_sbrk_r+0x1a>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	b103      	cbz	r3, 8002bd6 <_sbrk_r+0x1a>
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	200002e0 	.word	0x200002e0

08002bdc <__errno>:
 8002bdc:	4b01      	ldr	r3, [pc, #4]	@ (8002be4 <__errno+0x8>)
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <__libc_init_array>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	4d0d      	ldr	r5, [pc, #52]	@ (8002c20 <__libc_init_array+0x38>)
 8002bec:	4c0d      	ldr	r4, [pc, #52]	@ (8002c24 <__libc_init_array+0x3c>)
 8002bee:	1b64      	subs	r4, r4, r5
 8002bf0:	10a4      	asrs	r4, r4, #2
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	42a6      	cmp	r6, r4
 8002bf6:	d109      	bne.n	8002c0c <__libc_init_array+0x24>
 8002bf8:	4d0b      	ldr	r5, [pc, #44]	@ (8002c28 <__libc_init_array+0x40>)
 8002bfa:	4c0c      	ldr	r4, [pc, #48]	@ (8002c2c <__libc_init_array+0x44>)
 8002bfc:	f000 fba6 	bl	800334c <_init>
 8002c00:	1b64      	subs	r4, r4, r5
 8002c02:	10a4      	asrs	r4, r4, #2
 8002c04:	2600      	movs	r6, #0
 8002c06:	42a6      	cmp	r6, r4
 8002c08:	d105      	bne.n	8002c16 <__libc_init_array+0x2e>
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c10:	4798      	blx	r3
 8002c12:	3601      	adds	r6, #1
 8002c14:	e7ee      	b.n	8002bf4 <__libc_init_array+0xc>
 8002c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1a:	4798      	blx	r3
 8002c1c:	3601      	adds	r6, #1
 8002c1e:	e7f2      	b.n	8002c06 <__libc_init_array+0x1e>
 8002c20:	080033e0 	.word	0x080033e0
 8002c24:	080033e0 	.word	0x080033e0
 8002c28:	080033e0 	.word	0x080033e0
 8002c2c:	080033e4 	.word	0x080033e4

08002c30 <__retarget_lock_acquire_recursive>:
 8002c30:	4770      	bx	lr

08002c32 <__retarget_lock_release_recursive>:
 8002c32:	4770      	bx	lr

08002c34 <_free_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	4605      	mov	r5, r0
 8002c38:	2900      	cmp	r1, #0
 8002c3a:	d041      	beq.n	8002cc0 <_free_r+0x8c>
 8002c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c40:	1f0c      	subs	r4, r1, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bfb8      	it	lt
 8002c46:	18e4      	addlt	r4, r4, r3
 8002c48:	f7ff ff3e 	bl	8002ac8 <__malloc_lock>
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <_free_r+0x90>)
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	b933      	cbnz	r3, 8002c60 <_free_r+0x2c>
 8002c52:	6063      	str	r3, [r4, #4]
 8002c54:	6014      	str	r4, [r2, #0]
 8002c56:	4628      	mov	r0, r5
 8002c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c5c:	f7ff bf3a 	b.w	8002ad4 <__malloc_unlock>
 8002c60:	42a3      	cmp	r3, r4
 8002c62:	d908      	bls.n	8002c76 <_free_r+0x42>
 8002c64:	6820      	ldr	r0, [r4, #0]
 8002c66:	1821      	adds	r1, r4, r0
 8002c68:	428b      	cmp	r3, r1
 8002c6a:	bf01      	itttt	eq
 8002c6c:	6819      	ldreq	r1, [r3, #0]
 8002c6e:	685b      	ldreq	r3, [r3, #4]
 8002c70:	1809      	addeq	r1, r1, r0
 8002c72:	6021      	streq	r1, [r4, #0]
 8002c74:	e7ed      	b.n	8002c52 <_free_r+0x1e>
 8002c76:	461a      	mov	r2, r3
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	b10b      	cbz	r3, 8002c80 <_free_r+0x4c>
 8002c7c:	42a3      	cmp	r3, r4
 8002c7e:	d9fa      	bls.n	8002c76 <_free_r+0x42>
 8002c80:	6811      	ldr	r1, [r2, #0]
 8002c82:	1850      	adds	r0, r2, r1
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d10b      	bne.n	8002ca0 <_free_r+0x6c>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	4401      	add	r1, r0
 8002c8c:	1850      	adds	r0, r2, r1
 8002c8e:	4283      	cmp	r3, r0
 8002c90:	6011      	str	r1, [r2, #0]
 8002c92:	d1e0      	bne.n	8002c56 <_free_r+0x22>
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	6053      	str	r3, [r2, #4]
 8002c9a:	4408      	add	r0, r1
 8002c9c:	6010      	str	r0, [r2, #0]
 8002c9e:	e7da      	b.n	8002c56 <_free_r+0x22>
 8002ca0:	d902      	bls.n	8002ca8 <_free_r+0x74>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	602b      	str	r3, [r5, #0]
 8002ca6:	e7d6      	b.n	8002c56 <_free_r+0x22>
 8002ca8:	6820      	ldr	r0, [r4, #0]
 8002caa:	1821      	adds	r1, r4, r0
 8002cac:	428b      	cmp	r3, r1
 8002cae:	bf04      	itt	eq
 8002cb0:	6819      	ldreq	r1, [r3, #0]
 8002cb2:	685b      	ldreq	r3, [r3, #4]
 8002cb4:	6063      	str	r3, [r4, #4]
 8002cb6:	bf04      	itt	eq
 8002cb8:	1809      	addeq	r1, r1, r0
 8002cba:	6021      	streq	r1, [r4, #0]
 8002cbc:	6054      	str	r4, [r2, #4]
 8002cbe:	e7ca      	b.n	8002c56 <_free_r+0x22>
 8002cc0:	bd38      	pop	{r3, r4, r5, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200001a4 	.word	0x200001a4

08002cc8 <__ssputs_r>:
 8002cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ccc:	688e      	ldr	r6, [r1, #8]
 8002cce:	461f      	mov	r7, r3
 8002cd0:	42be      	cmp	r6, r7
 8002cd2:	680b      	ldr	r3, [r1, #0]
 8002cd4:	4682      	mov	sl, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	4690      	mov	r8, r2
 8002cda:	d82d      	bhi.n	8002d38 <__ssputs_r+0x70>
 8002cdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ce0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ce4:	d026      	beq.n	8002d34 <__ssputs_r+0x6c>
 8002ce6:	6965      	ldr	r5, [r4, #20]
 8002ce8:	6909      	ldr	r1, [r1, #16]
 8002cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cee:	eba3 0901 	sub.w	r9, r3, r1
 8002cf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cf6:	1c7b      	adds	r3, r7, #1
 8002cf8:	444b      	add	r3, r9
 8002cfa:	106d      	asrs	r5, r5, #1
 8002cfc:	429d      	cmp	r5, r3
 8002cfe:	bf38      	it	cc
 8002d00:	461d      	movcc	r5, r3
 8002d02:	0553      	lsls	r3, r2, #21
 8002d04:	d527      	bpl.n	8002d56 <__ssputs_r+0x8e>
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7ff fe5e 	bl	80029c8 <_malloc_r>
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	b360      	cbz	r0, 8002d6a <__ssputs_r+0xa2>
 8002d10:	6921      	ldr	r1, [r4, #16]
 8002d12:	464a      	mov	r2, r9
 8002d14:	f000 fad6 	bl	80032c4 <memcpy>
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	6126      	str	r6, [r4, #16]
 8002d26:	6165      	str	r5, [r4, #20]
 8002d28:	444e      	add	r6, r9
 8002d2a:	eba5 0509 	sub.w	r5, r5, r9
 8002d2e:	6026      	str	r6, [r4, #0]
 8002d30:	60a5      	str	r5, [r4, #8]
 8002d32:	463e      	mov	r6, r7
 8002d34:	42be      	cmp	r6, r7
 8002d36:	d900      	bls.n	8002d3a <__ssputs_r+0x72>
 8002d38:	463e      	mov	r6, r7
 8002d3a:	6820      	ldr	r0, [r4, #0]
 8002d3c:	4632      	mov	r2, r6
 8002d3e:	4641      	mov	r1, r8
 8002d40:	f000 faa6 	bl	8003290 <memmove>
 8002d44:	68a3      	ldr	r3, [r4, #8]
 8002d46:	1b9b      	subs	r3, r3, r6
 8002d48:	60a3      	str	r3, [r4, #8]
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	4433      	add	r3, r6
 8002d4e:	6023      	str	r3, [r4, #0]
 8002d50:	2000      	movs	r0, #0
 8002d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d56:	462a      	mov	r2, r5
 8002d58:	f000 fac2 	bl	80032e0 <_realloc_r>
 8002d5c:	4606      	mov	r6, r0
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d1e0      	bne.n	8002d24 <__ssputs_r+0x5c>
 8002d62:	6921      	ldr	r1, [r4, #16]
 8002d64:	4650      	mov	r0, sl
 8002d66:	f7ff ff65 	bl	8002c34 <_free_r>
 8002d6a:	230c      	movs	r3, #12
 8002d6c:	f8ca 3000 	str.w	r3, [sl]
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d76:	81a3      	strh	r3, [r4, #12]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d7c:	e7e9      	b.n	8002d52 <__ssputs_r+0x8a>
	...

08002d80 <_svfiprintf_r>:
 8002d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d84:	4698      	mov	r8, r3
 8002d86:	898b      	ldrh	r3, [r1, #12]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	b09d      	sub	sp, #116	@ 0x74
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	460d      	mov	r5, r1
 8002d90:	4614      	mov	r4, r2
 8002d92:	d510      	bpl.n	8002db6 <_svfiprintf_r+0x36>
 8002d94:	690b      	ldr	r3, [r1, #16]
 8002d96:	b973      	cbnz	r3, 8002db6 <_svfiprintf_r+0x36>
 8002d98:	2140      	movs	r1, #64	@ 0x40
 8002d9a:	f7ff fe15 	bl	80029c8 <_malloc_r>
 8002d9e:	6028      	str	r0, [r5, #0]
 8002da0:	6128      	str	r0, [r5, #16]
 8002da2:	b930      	cbnz	r0, 8002db2 <_svfiprintf_r+0x32>
 8002da4:	230c      	movs	r3, #12
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dac:	b01d      	add	sp, #116	@ 0x74
 8002dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db2:	2340      	movs	r3, #64	@ 0x40
 8002db4:	616b      	str	r3, [r5, #20]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dba:	2320      	movs	r3, #32
 8002dbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dc4:	2330      	movs	r3, #48	@ 0x30
 8002dc6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002f64 <_svfiprintf_r+0x1e4>
 8002dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002dce:	f04f 0901 	mov.w	r9, #1
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	469a      	mov	sl, r3
 8002dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dda:	b10a      	cbz	r2, 8002de0 <_svfiprintf_r+0x60>
 8002ddc:	2a25      	cmp	r2, #37	@ 0x25
 8002dde:	d1f9      	bne.n	8002dd4 <_svfiprintf_r+0x54>
 8002de0:	ebba 0b04 	subs.w	fp, sl, r4
 8002de4:	d00b      	beq.n	8002dfe <_svfiprintf_r+0x7e>
 8002de6:	465b      	mov	r3, fp
 8002de8:	4622      	mov	r2, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	4638      	mov	r0, r7
 8002dee:	f7ff ff6b 	bl	8002cc8 <__ssputs_r>
 8002df2:	3001      	adds	r0, #1
 8002df4:	f000 80a7 	beq.w	8002f46 <_svfiprintf_r+0x1c6>
 8002df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dfa:	445a      	add	r2, fp
 8002dfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8002dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 809f 	beq.w	8002f46 <_svfiprintf_r+0x1c6>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e12:	f10a 0a01 	add.w	sl, sl, #1
 8002e16:	9304      	str	r3, [sp, #16]
 8002e18:	9307      	str	r3, [sp, #28]
 8002e1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e20:	4654      	mov	r4, sl
 8002e22:	2205      	movs	r2, #5
 8002e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e28:	484e      	ldr	r0, [pc, #312]	@ (8002f64 <_svfiprintf_r+0x1e4>)
 8002e2a:	f7fd f9d9 	bl	80001e0 <memchr>
 8002e2e:	9a04      	ldr	r2, [sp, #16]
 8002e30:	b9d8      	cbnz	r0, 8002e6a <_svfiprintf_r+0xea>
 8002e32:	06d0      	lsls	r0, r2, #27
 8002e34:	bf44      	itt	mi
 8002e36:	2320      	movmi	r3, #32
 8002e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e3c:	0711      	lsls	r1, r2, #28
 8002e3e:	bf44      	itt	mi
 8002e40:	232b      	movmi	r3, #43	@ 0x2b
 8002e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e46:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e4c:	d015      	beq.n	8002e7a <_svfiprintf_r+0xfa>
 8002e4e:	9a07      	ldr	r2, [sp, #28]
 8002e50:	4654      	mov	r4, sl
 8002e52:	2000      	movs	r0, #0
 8002e54:	f04f 0c0a 	mov.w	ip, #10
 8002e58:	4621      	mov	r1, r4
 8002e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e5e:	3b30      	subs	r3, #48	@ 0x30
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	d94b      	bls.n	8002efc <_svfiprintf_r+0x17c>
 8002e64:	b1b0      	cbz	r0, 8002e94 <_svfiprintf_r+0x114>
 8002e66:	9207      	str	r2, [sp, #28]
 8002e68:	e014      	b.n	8002e94 <_svfiprintf_r+0x114>
 8002e6a:	eba0 0308 	sub.w	r3, r0, r8
 8002e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8002e72:	4313      	orrs	r3, r2
 8002e74:	9304      	str	r3, [sp, #16]
 8002e76:	46a2      	mov	sl, r4
 8002e78:	e7d2      	b.n	8002e20 <_svfiprintf_r+0xa0>
 8002e7a:	9b03      	ldr	r3, [sp, #12]
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	9103      	str	r1, [sp, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfbb      	ittet	lt
 8002e86:	425b      	neglt	r3, r3
 8002e88:	f042 0202 	orrlt.w	r2, r2, #2
 8002e8c:	9307      	strge	r3, [sp, #28]
 8002e8e:	9307      	strlt	r3, [sp, #28]
 8002e90:	bfb8      	it	lt
 8002e92:	9204      	strlt	r2, [sp, #16]
 8002e94:	7823      	ldrb	r3, [r4, #0]
 8002e96:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e98:	d10a      	bne.n	8002eb0 <_svfiprintf_r+0x130>
 8002e9a:	7863      	ldrb	r3, [r4, #1]
 8002e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e9e:	d132      	bne.n	8002f06 <_svfiprintf_r+0x186>
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	1d1a      	adds	r2, r3, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	9203      	str	r2, [sp, #12]
 8002ea8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002eac:	3402      	adds	r4, #2
 8002eae:	9305      	str	r3, [sp, #20]
 8002eb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002f74 <_svfiprintf_r+0x1f4>
 8002eb4:	7821      	ldrb	r1, [r4, #0]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	4650      	mov	r0, sl
 8002eba:	f7fd f991 	bl	80001e0 <memchr>
 8002ebe:	b138      	cbz	r0, 8002ed0 <_svfiprintf_r+0x150>
 8002ec0:	9b04      	ldr	r3, [sp, #16]
 8002ec2:	eba0 000a 	sub.w	r0, r0, sl
 8002ec6:	2240      	movs	r2, #64	@ 0x40
 8002ec8:	4082      	lsls	r2, r0
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	3401      	adds	r4, #1
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed4:	4824      	ldr	r0, [pc, #144]	@ (8002f68 <_svfiprintf_r+0x1e8>)
 8002ed6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002eda:	2206      	movs	r2, #6
 8002edc:	f7fd f980 	bl	80001e0 <memchr>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	d036      	beq.n	8002f52 <_svfiprintf_r+0x1d2>
 8002ee4:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <_svfiprintf_r+0x1ec>)
 8002ee6:	bb1b      	cbnz	r3, 8002f30 <_svfiprintf_r+0x1b0>
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	3307      	adds	r3, #7
 8002eec:	f023 0307 	bic.w	r3, r3, #7
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	9303      	str	r3, [sp, #12]
 8002ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ef6:	4433      	add	r3, r6
 8002ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002efa:	e76a      	b.n	8002dd2 <_svfiprintf_r+0x52>
 8002efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f00:	460c      	mov	r4, r1
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7a8      	b.n	8002e58 <_svfiprintf_r+0xd8>
 8002f06:	2300      	movs	r3, #0
 8002f08:	3401      	adds	r4, #1
 8002f0a:	9305      	str	r3, [sp, #20]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f04f 0c0a 	mov.w	ip, #10
 8002f12:	4620      	mov	r0, r4
 8002f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f18:	3a30      	subs	r2, #48	@ 0x30
 8002f1a:	2a09      	cmp	r2, #9
 8002f1c:	d903      	bls.n	8002f26 <_svfiprintf_r+0x1a6>
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0c6      	beq.n	8002eb0 <_svfiprintf_r+0x130>
 8002f22:	9105      	str	r1, [sp, #20]
 8002f24:	e7c4      	b.n	8002eb0 <_svfiprintf_r+0x130>
 8002f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e7f0      	b.n	8002f12 <_svfiprintf_r+0x192>
 8002f30:	ab03      	add	r3, sp, #12
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	462a      	mov	r2, r5
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <_svfiprintf_r+0x1f0>)
 8002f38:	a904      	add	r1, sp, #16
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	f3af 8000 	nop.w
 8002f40:	1c42      	adds	r2, r0, #1
 8002f42:	4606      	mov	r6, r0
 8002f44:	d1d6      	bne.n	8002ef4 <_svfiprintf_r+0x174>
 8002f46:	89ab      	ldrh	r3, [r5, #12]
 8002f48:	065b      	lsls	r3, r3, #25
 8002f4a:	f53f af2d 	bmi.w	8002da8 <_svfiprintf_r+0x28>
 8002f4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f50:	e72c      	b.n	8002dac <_svfiprintf_r+0x2c>
 8002f52:	ab03      	add	r3, sp, #12
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	462a      	mov	r2, r5
 8002f58:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <_svfiprintf_r+0x1f0>)
 8002f5a:	a904      	add	r1, sp, #16
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	f000 f879 	bl	8003054 <_printf_i>
 8002f62:	e7ed      	b.n	8002f40 <_svfiprintf_r+0x1c0>
 8002f64:	080033a5 	.word	0x080033a5
 8002f68:	080033af 	.word	0x080033af
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	08002cc9 	.word	0x08002cc9
 8002f74:	080033ab 	.word	0x080033ab

08002f78 <_printf_common>:
 8002f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f7c:	4616      	mov	r6, r2
 8002f7e:	4698      	mov	r8, r3
 8002f80:	688a      	ldr	r2, [r1, #8]
 8002f82:	690b      	ldr	r3, [r1, #16]
 8002f84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bfb8      	it	lt
 8002f8c:	4613      	movlt	r3, r2
 8002f8e:	6033      	str	r3, [r6, #0]
 8002f90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f94:	4607      	mov	r7, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	b10a      	cbz	r2, 8002f9e <_printf_common+0x26>
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	6033      	str	r3, [r6, #0]
 8002f9e:	6823      	ldr	r3, [r4, #0]
 8002fa0:	0699      	lsls	r1, r3, #26
 8002fa2:	bf42      	ittt	mi
 8002fa4:	6833      	ldrmi	r3, [r6, #0]
 8002fa6:	3302      	addmi	r3, #2
 8002fa8:	6033      	strmi	r3, [r6, #0]
 8002faa:	6825      	ldr	r5, [r4, #0]
 8002fac:	f015 0506 	ands.w	r5, r5, #6
 8002fb0:	d106      	bne.n	8002fc0 <_printf_common+0x48>
 8002fb2:	f104 0a19 	add.w	sl, r4, #25
 8002fb6:	68e3      	ldr	r3, [r4, #12]
 8002fb8:	6832      	ldr	r2, [r6, #0]
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	42ab      	cmp	r3, r5
 8002fbe:	dc26      	bgt.n	800300e <_printf_common+0x96>
 8002fc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	3b00      	subs	r3, #0
 8002fc8:	bf18      	it	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	0692      	lsls	r2, r2, #26
 8002fce:	d42b      	bmi.n	8003028 <_printf_common+0xb0>
 8002fd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	47c8      	blx	r9
 8002fda:	3001      	adds	r0, #1
 8002fdc:	d01e      	beq.n	800301c <_printf_common+0xa4>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	6922      	ldr	r2, [r4, #16]
 8002fe2:	f003 0306 	and.w	r3, r3, #6
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf02      	ittt	eq
 8002fea:	68e5      	ldreq	r5, [r4, #12]
 8002fec:	6833      	ldreq	r3, [r6, #0]
 8002fee:	1aed      	subeq	r5, r5, r3
 8002ff0:	68a3      	ldr	r3, [r4, #8]
 8002ff2:	bf0c      	ite	eq
 8002ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff8:	2500      	movne	r5, #0
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	bfc4      	itt	gt
 8002ffe:	1a9b      	subgt	r3, r3, r2
 8003000:	18ed      	addgt	r5, r5, r3
 8003002:	2600      	movs	r6, #0
 8003004:	341a      	adds	r4, #26
 8003006:	42b5      	cmp	r5, r6
 8003008:	d11a      	bne.n	8003040 <_printf_common+0xc8>
 800300a:	2000      	movs	r0, #0
 800300c:	e008      	b.n	8003020 <_printf_common+0xa8>
 800300e:	2301      	movs	r3, #1
 8003010:	4652      	mov	r2, sl
 8003012:	4641      	mov	r1, r8
 8003014:	4638      	mov	r0, r7
 8003016:	47c8      	blx	r9
 8003018:	3001      	adds	r0, #1
 800301a:	d103      	bne.n	8003024 <_printf_common+0xac>
 800301c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	3501      	adds	r5, #1
 8003026:	e7c6      	b.n	8002fb6 <_printf_common+0x3e>
 8003028:	18e1      	adds	r1, r4, r3
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	2030      	movs	r0, #48	@ 0x30
 800302e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003032:	4422      	add	r2, r4
 8003034:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800303c:	3302      	adds	r3, #2
 800303e:	e7c7      	b.n	8002fd0 <_printf_common+0x58>
 8003040:	2301      	movs	r3, #1
 8003042:	4622      	mov	r2, r4
 8003044:	4641      	mov	r1, r8
 8003046:	4638      	mov	r0, r7
 8003048:	47c8      	blx	r9
 800304a:	3001      	adds	r0, #1
 800304c:	d0e6      	beq.n	800301c <_printf_common+0xa4>
 800304e:	3601      	adds	r6, #1
 8003050:	e7d9      	b.n	8003006 <_printf_common+0x8e>
	...

08003054 <_printf_i>:
 8003054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003058:	7e0f      	ldrb	r7, [r1, #24]
 800305a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800305c:	2f78      	cmp	r7, #120	@ 0x78
 800305e:	4691      	mov	r9, r2
 8003060:	4680      	mov	r8, r0
 8003062:	460c      	mov	r4, r1
 8003064:	469a      	mov	sl, r3
 8003066:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800306a:	d807      	bhi.n	800307c <_printf_i+0x28>
 800306c:	2f62      	cmp	r7, #98	@ 0x62
 800306e:	d80a      	bhi.n	8003086 <_printf_i+0x32>
 8003070:	2f00      	cmp	r7, #0
 8003072:	f000 80d1 	beq.w	8003218 <_printf_i+0x1c4>
 8003076:	2f58      	cmp	r7, #88	@ 0x58
 8003078:	f000 80b8 	beq.w	80031ec <_printf_i+0x198>
 800307c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003080:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003084:	e03a      	b.n	80030fc <_printf_i+0xa8>
 8003086:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800308a:	2b15      	cmp	r3, #21
 800308c:	d8f6      	bhi.n	800307c <_printf_i+0x28>
 800308e:	a101      	add	r1, pc, #4	@ (adr r1, 8003094 <_printf_i+0x40>)
 8003090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003094:	080030ed 	.word	0x080030ed
 8003098:	08003101 	.word	0x08003101
 800309c:	0800307d 	.word	0x0800307d
 80030a0:	0800307d 	.word	0x0800307d
 80030a4:	0800307d 	.word	0x0800307d
 80030a8:	0800307d 	.word	0x0800307d
 80030ac:	08003101 	.word	0x08003101
 80030b0:	0800307d 	.word	0x0800307d
 80030b4:	0800307d 	.word	0x0800307d
 80030b8:	0800307d 	.word	0x0800307d
 80030bc:	0800307d 	.word	0x0800307d
 80030c0:	080031ff 	.word	0x080031ff
 80030c4:	0800312b 	.word	0x0800312b
 80030c8:	080031b9 	.word	0x080031b9
 80030cc:	0800307d 	.word	0x0800307d
 80030d0:	0800307d 	.word	0x0800307d
 80030d4:	08003221 	.word	0x08003221
 80030d8:	0800307d 	.word	0x0800307d
 80030dc:	0800312b 	.word	0x0800312b
 80030e0:	0800307d 	.word	0x0800307d
 80030e4:	0800307d 	.word	0x0800307d
 80030e8:	080031c1 	.word	0x080031c1
 80030ec:	6833      	ldr	r3, [r6, #0]
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6032      	str	r2, [r6, #0]
 80030f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030fc:	2301      	movs	r3, #1
 80030fe:	e09c      	b.n	800323a <_printf_i+0x1e6>
 8003100:	6833      	ldr	r3, [r6, #0]
 8003102:	6820      	ldr	r0, [r4, #0]
 8003104:	1d19      	adds	r1, r3, #4
 8003106:	6031      	str	r1, [r6, #0]
 8003108:	0606      	lsls	r6, r0, #24
 800310a:	d501      	bpl.n	8003110 <_printf_i+0xbc>
 800310c:	681d      	ldr	r5, [r3, #0]
 800310e:	e003      	b.n	8003118 <_printf_i+0xc4>
 8003110:	0645      	lsls	r5, r0, #25
 8003112:	d5fb      	bpl.n	800310c <_printf_i+0xb8>
 8003114:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003118:	2d00      	cmp	r5, #0
 800311a:	da03      	bge.n	8003124 <_printf_i+0xd0>
 800311c:	232d      	movs	r3, #45	@ 0x2d
 800311e:	426d      	negs	r5, r5
 8003120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003124:	4858      	ldr	r0, [pc, #352]	@ (8003288 <_printf_i+0x234>)
 8003126:	230a      	movs	r3, #10
 8003128:	e011      	b.n	800314e <_printf_i+0xfa>
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	6833      	ldr	r3, [r6, #0]
 800312e:	0608      	lsls	r0, r1, #24
 8003130:	f853 5b04 	ldr.w	r5, [r3], #4
 8003134:	d402      	bmi.n	800313c <_printf_i+0xe8>
 8003136:	0649      	lsls	r1, r1, #25
 8003138:	bf48      	it	mi
 800313a:	b2ad      	uxthmi	r5, r5
 800313c:	2f6f      	cmp	r7, #111	@ 0x6f
 800313e:	4852      	ldr	r0, [pc, #328]	@ (8003288 <_printf_i+0x234>)
 8003140:	6033      	str	r3, [r6, #0]
 8003142:	bf14      	ite	ne
 8003144:	230a      	movne	r3, #10
 8003146:	2308      	moveq	r3, #8
 8003148:	2100      	movs	r1, #0
 800314a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800314e:	6866      	ldr	r6, [r4, #4]
 8003150:	60a6      	str	r6, [r4, #8]
 8003152:	2e00      	cmp	r6, #0
 8003154:	db05      	blt.n	8003162 <_printf_i+0x10e>
 8003156:	6821      	ldr	r1, [r4, #0]
 8003158:	432e      	orrs	r6, r5
 800315a:	f021 0104 	bic.w	r1, r1, #4
 800315e:	6021      	str	r1, [r4, #0]
 8003160:	d04b      	beq.n	80031fa <_printf_i+0x1a6>
 8003162:	4616      	mov	r6, r2
 8003164:	fbb5 f1f3 	udiv	r1, r5, r3
 8003168:	fb03 5711 	mls	r7, r3, r1, r5
 800316c:	5dc7      	ldrb	r7, [r0, r7]
 800316e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003172:	462f      	mov	r7, r5
 8003174:	42bb      	cmp	r3, r7
 8003176:	460d      	mov	r5, r1
 8003178:	d9f4      	bls.n	8003164 <_printf_i+0x110>
 800317a:	2b08      	cmp	r3, #8
 800317c:	d10b      	bne.n	8003196 <_printf_i+0x142>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	07df      	lsls	r7, r3, #31
 8003182:	d508      	bpl.n	8003196 <_printf_i+0x142>
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	6861      	ldr	r1, [r4, #4]
 8003188:	4299      	cmp	r1, r3
 800318a:	bfde      	ittt	le
 800318c:	2330      	movle	r3, #48	@ 0x30
 800318e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003192:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003196:	1b92      	subs	r2, r2, r6
 8003198:	6122      	str	r2, [r4, #16]
 800319a:	f8cd a000 	str.w	sl, [sp]
 800319e:	464b      	mov	r3, r9
 80031a0:	aa03      	add	r2, sp, #12
 80031a2:	4621      	mov	r1, r4
 80031a4:	4640      	mov	r0, r8
 80031a6:	f7ff fee7 	bl	8002f78 <_printf_common>
 80031aa:	3001      	adds	r0, #1
 80031ac:	d14a      	bne.n	8003244 <_printf_i+0x1f0>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031b2:	b004      	add	sp, #16
 80031b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f043 0320 	orr.w	r3, r3, #32
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	4832      	ldr	r0, [pc, #200]	@ (800328c <_printf_i+0x238>)
 80031c2:	2778      	movs	r7, #120	@ 0x78
 80031c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	6831      	ldr	r1, [r6, #0]
 80031cc:	061f      	lsls	r7, r3, #24
 80031ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80031d2:	d402      	bmi.n	80031da <_printf_i+0x186>
 80031d4:	065f      	lsls	r7, r3, #25
 80031d6:	bf48      	it	mi
 80031d8:	b2ad      	uxthmi	r5, r5
 80031da:	6031      	str	r1, [r6, #0]
 80031dc:	07d9      	lsls	r1, r3, #31
 80031de:	bf44      	itt	mi
 80031e0:	f043 0320 	orrmi.w	r3, r3, #32
 80031e4:	6023      	strmi	r3, [r4, #0]
 80031e6:	b11d      	cbz	r5, 80031f0 <_printf_i+0x19c>
 80031e8:	2310      	movs	r3, #16
 80031ea:	e7ad      	b.n	8003148 <_printf_i+0xf4>
 80031ec:	4826      	ldr	r0, [pc, #152]	@ (8003288 <_printf_i+0x234>)
 80031ee:	e7e9      	b.n	80031c4 <_printf_i+0x170>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f023 0320 	bic.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	e7f6      	b.n	80031e8 <_printf_i+0x194>
 80031fa:	4616      	mov	r6, r2
 80031fc:	e7bd      	b.n	800317a <_printf_i+0x126>
 80031fe:	6833      	ldr	r3, [r6, #0]
 8003200:	6825      	ldr	r5, [r4, #0]
 8003202:	6961      	ldr	r1, [r4, #20]
 8003204:	1d18      	adds	r0, r3, #4
 8003206:	6030      	str	r0, [r6, #0]
 8003208:	062e      	lsls	r6, r5, #24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	d501      	bpl.n	8003212 <_printf_i+0x1be>
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	e002      	b.n	8003218 <_printf_i+0x1c4>
 8003212:	0668      	lsls	r0, r5, #25
 8003214:	d5fb      	bpl.n	800320e <_printf_i+0x1ba>
 8003216:	8019      	strh	r1, [r3, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	6123      	str	r3, [r4, #16]
 800321c:	4616      	mov	r6, r2
 800321e:	e7bc      	b.n	800319a <_printf_i+0x146>
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	6032      	str	r2, [r6, #0]
 8003226:	681e      	ldr	r6, [r3, #0]
 8003228:	6862      	ldr	r2, [r4, #4]
 800322a:	2100      	movs	r1, #0
 800322c:	4630      	mov	r0, r6
 800322e:	f7fc ffd7 	bl	80001e0 <memchr>
 8003232:	b108      	cbz	r0, 8003238 <_printf_i+0x1e4>
 8003234:	1b80      	subs	r0, r0, r6
 8003236:	6060      	str	r0, [r4, #4]
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	6123      	str	r3, [r4, #16]
 800323c:	2300      	movs	r3, #0
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003242:	e7aa      	b.n	800319a <_printf_i+0x146>
 8003244:	6923      	ldr	r3, [r4, #16]
 8003246:	4632      	mov	r2, r6
 8003248:	4649      	mov	r1, r9
 800324a:	4640      	mov	r0, r8
 800324c:	47d0      	blx	sl
 800324e:	3001      	adds	r0, #1
 8003250:	d0ad      	beq.n	80031ae <_printf_i+0x15a>
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	079b      	lsls	r3, r3, #30
 8003256:	d413      	bmi.n	8003280 <_printf_i+0x22c>
 8003258:	68e0      	ldr	r0, [r4, #12]
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	4298      	cmp	r0, r3
 800325e:	bfb8      	it	lt
 8003260:	4618      	movlt	r0, r3
 8003262:	e7a6      	b.n	80031b2 <_printf_i+0x15e>
 8003264:	2301      	movs	r3, #1
 8003266:	4632      	mov	r2, r6
 8003268:	4649      	mov	r1, r9
 800326a:	4640      	mov	r0, r8
 800326c:	47d0      	blx	sl
 800326e:	3001      	adds	r0, #1
 8003270:	d09d      	beq.n	80031ae <_printf_i+0x15a>
 8003272:	3501      	adds	r5, #1
 8003274:	68e3      	ldr	r3, [r4, #12]
 8003276:	9903      	ldr	r1, [sp, #12]
 8003278:	1a5b      	subs	r3, r3, r1
 800327a:	42ab      	cmp	r3, r5
 800327c:	dcf2      	bgt.n	8003264 <_printf_i+0x210>
 800327e:	e7eb      	b.n	8003258 <_printf_i+0x204>
 8003280:	2500      	movs	r5, #0
 8003282:	f104 0619 	add.w	r6, r4, #25
 8003286:	e7f5      	b.n	8003274 <_printf_i+0x220>
 8003288:	080033b6 	.word	0x080033b6
 800328c:	080033c7 	.word	0x080033c7

08003290 <memmove>:
 8003290:	4288      	cmp	r0, r1
 8003292:	b510      	push	{r4, lr}
 8003294:	eb01 0402 	add.w	r4, r1, r2
 8003298:	d902      	bls.n	80032a0 <memmove+0x10>
 800329a:	4284      	cmp	r4, r0
 800329c:	4623      	mov	r3, r4
 800329e:	d807      	bhi.n	80032b0 <memmove+0x20>
 80032a0:	1e43      	subs	r3, r0, #1
 80032a2:	42a1      	cmp	r1, r4
 80032a4:	d008      	beq.n	80032b8 <memmove+0x28>
 80032a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032ae:	e7f8      	b.n	80032a2 <memmove+0x12>
 80032b0:	4402      	add	r2, r0
 80032b2:	4601      	mov	r1, r0
 80032b4:	428a      	cmp	r2, r1
 80032b6:	d100      	bne.n	80032ba <memmove+0x2a>
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032c2:	e7f7      	b.n	80032b4 <memmove+0x24>

080032c4 <memcpy>:
 80032c4:	440a      	add	r2, r1
 80032c6:	4291      	cmp	r1, r2
 80032c8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80032cc:	d100      	bne.n	80032d0 <memcpy+0xc>
 80032ce:	4770      	bx	lr
 80032d0:	b510      	push	{r4, lr}
 80032d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032da:	4291      	cmp	r1, r2
 80032dc:	d1f9      	bne.n	80032d2 <memcpy+0xe>
 80032de:	bd10      	pop	{r4, pc}

080032e0 <_realloc_r>:
 80032e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e4:	4607      	mov	r7, r0
 80032e6:	4614      	mov	r4, r2
 80032e8:	460d      	mov	r5, r1
 80032ea:	b921      	cbnz	r1, 80032f6 <_realloc_r+0x16>
 80032ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f0:	4611      	mov	r1, r2
 80032f2:	f7ff bb69 	b.w	80029c8 <_malloc_r>
 80032f6:	b92a      	cbnz	r2, 8003304 <_realloc_r+0x24>
 80032f8:	f7ff fc9c 	bl	8002c34 <_free_r>
 80032fc:	4625      	mov	r5, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	f000 f81a 	bl	800333c <_malloc_usable_size_r>
 8003308:	4284      	cmp	r4, r0
 800330a:	4606      	mov	r6, r0
 800330c:	d802      	bhi.n	8003314 <_realloc_r+0x34>
 800330e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003312:	d8f4      	bhi.n	80032fe <_realloc_r+0x1e>
 8003314:	4621      	mov	r1, r4
 8003316:	4638      	mov	r0, r7
 8003318:	f7ff fb56 	bl	80029c8 <_malloc_r>
 800331c:	4680      	mov	r8, r0
 800331e:	b908      	cbnz	r0, 8003324 <_realloc_r+0x44>
 8003320:	4645      	mov	r5, r8
 8003322:	e7ec      	b.n	80032fe <_realloc_r+0x1e>
 8003324:	42b4      	cmp	r4, r6
 8003326:	4622      	mov	r2, r4
 8003328:	4629      	mov	r1, r5
 800332a:	bf28      	it	cs
 800332c:	4632      	movcs	r2, r6
 800332e:	f7ff ffc9 	bl	80032c4 <memcpy>
 8003332:	4629      	mov	r1, r5
 8003334:	4638      	mov	r0, r7
 8003336:	f7ff fc7d 	bl	8002c34 <_free_r>
 800333a:	e7f1      	b.n	8003320 <_realloc_r+0x40>

0800333c <_malloc_usable_size_r>:
 800333c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003340:	1f18      	subs	r0, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbc      	itt	lt
 8003346:	580b      	ldrlt	r3, [r1, r0]
 8003348:	18c0      	addlt	r0, r0, r3
 800334a:	4770      	bx	lr

0800334c <_init>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr

08003358 <_fini>:
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	bf00      	nop
 800335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335e:	bc08      	pop	{r3}
 8003360:	469e      	mov	lr, r3
 8003362:	4770      	bx	lr
